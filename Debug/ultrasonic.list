
ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000452c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004668  08004668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004730  08004730  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004730  08004730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004738  08004738  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004738  08004738  00014738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800473c  0800473c  0001473c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000074  080047b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080047b4  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9fb  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc3  00000000  00000000  0002aa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  0002ca60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  0002d648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017010  00000000  00000000  0002e158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c698  00000000  00000000  00045168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d061  00000000  00000000  00051800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de861  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000389c  00000000  00000000  000de8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000074 	.word	0x20000074
 8000158:	00000000 	.word	0x00000000
 800015c:	08004650 	.word	0x08004650

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000078 	.word	0x20000078
 8000178:	08004650 	.word	0x08004650

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800048c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000490:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000494:	f003 0301 	and.w	r3, r3, #1
 8000498:	2b00      	cmp	r3, #0
 800049a:	d013      	beq.n	80004c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800049c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d00b      	beq.n	80004c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004ac:	e000      	b.n	80004b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d0f9      	beq.n	80004ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004c4:	687b      	ldr	r3, [r7, #4]
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	e009      	b.n	80004fa <_write+0x2a>
    ITM_SendChar((*ptr++));
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	1c5a      	adds	r2, r3, #1
 80004ea:	60ba      	str	r2, [r7, #8]
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff ffc8 	bl	8000484 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	3301      	adds	r3, #1
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	697a      	ldr	r2, [r7, #20]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	429a      	cmp	r2, r3
 8000500:	dbf1      	blt.n	80004e6 <_write+0x16>
  return len;
 8000502:	687b      	ldr	r3, [r7, #4]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3718      	adds	r7, #24
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fc89 	bl	8000e26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f81c 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f860 	bl	80005dc <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */
  us100_init();
 800051c:	f000 fb72 	bl	8000c04 <us100_init>
  motor_control_init();
 8000520:	f000 f884 	bl	800062c <motor_control_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  value = get_dist(1);
 8000524:	2001      	movs	r0, #1
 8000526:	f000 fb77 	bl	8000c18 <get_dist>
 800052a:	4603      	mov	r3, r0
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <main+0x3c>)
 8000530:	801a      	strh	r2, [r3, #0]
	  printf("D = %d mm\n\r", value);
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <main+0x3c>)
 8000534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000538:	4619      	mov	r1, r3
 800053a:	4804      	ldr	r0, [pc, #16]	; (800054c <main+0x40>)
 800053c:	f003 f8f4 	bl	8003728 <iprintf>
	  HAL_Delay(100);
 8000540:	2064      	movs	r0, #100	; 0x64
 8000542:	f000 fcdf 	bl	8000f04 <HAL_Delay>
	  value = get_dist(1);
 8000546:	e7ed      	b.n	8000524 <main+0x18>
 8000548:	20000090 	.word	0x20000090
 800054c:	08004668 	.word	0x08004668

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b092      	sub	sp, #72	; 0x48
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	2234      	movs	r2, #52	; 0x34
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f003 f8da 	bl	8003718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	463b      	mov	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <SystemClock_Config+0x88>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800057a:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <SystemClock_Config+0x88>)
 800057c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000580:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000582:	2302      	movs	r3, #2
 8000584:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	2301      	movs	r3, #1
 8000588:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	2310      	movs	r3, #16
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800058e:	2300      	movs	r3, #0
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fff2 	bl	8001580 <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80005a2:	f000 f83d 	bl	8000620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005aa:	2301      	movs	r3, #1
 80005ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ba:	463b      	mov	r3, r7
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fb0e 	bl	8001be0 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005ca:	f000 f829 	bl	8000620 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3748      	adds	r7, #72	; 0x48
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_GPIO_Init+0x40>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a0d      	ldr	r2, [pc, #52]	; (800061c <MX_GPIO_Init+0x40>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_GPIO_Init+0x40>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_GPIO_Init+0x40>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <MX_GPIO_Init+0x40>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <MX_GPIO_Init+0x40>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	40023800 	.word	0x40023800

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	e7fe      	b.n	8000628 <Error_Handler+0x8>
	...

0800062c <motor_control_init>:
int16_t speed_to_wheel = 0.01; // satunnainen arvaus, pitää kalibroida.

static void MX_TIM3_Init(void);

void motor_control_init()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 8000630:	f000 f822 	bl	8000678 <MX_TIM3_Init>

	TIM3->CCR1 = 0;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <motor_control_init+0x44>)
 8000636:	2200      	movs	r2, #0
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <motor_control_init+0x44>)
 800063c:	2200      	movs	r2, #0
 800063e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 0;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <motor_control_init+0x44>)
 8000642:	2200      	movs	r2, #0
 8000644:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 0;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <motor_control_init+0x44>)
 8000648:	2200      	movs	r2, #0
 800064a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800064c:	2100      	movs	r1, #0
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <motor_control_init+0x48>)
 8000650:	f001 fdd2 	bl	80021f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000654:	2104      	movs	r1, #4
 8000656:	4807      	ldr	r0, [pc, #28]	; (8000674 <motor_control_init+0x48>)
 8000658:	f001 fdce 	bl	80021f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800065c:	2108      	movs	r1, #8
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <motor_control_init+0x48>)
 8000660:	f001 fdca 	bl	80021f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000664:	210c      	movs	r1, #12
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <motor_control_init+0x48>)
 8000668:	f001 fdc6 	bl	80021f8 <HAL_TIM_PWM_Start>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40000400 	.word	0x40000400
 8000674:	20000094 	.word	0x20000094

08000678 <MX_TIM3_Init>:
		wheel2_distance += speed2*speed_to_wheel;
	}
}

static void MX_TIM3_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067e:	f107 0318 	add.w	r3, r7, #24
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000696:	463b      	mov	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 80006a2:	4b3d      	ldr	r3, [pc, #244]	; (8000798 <MX_TIM3_Init+0x120>)
 80006a4:	4a3d      	ldr	r2, [pc, #244]	; (800079c <MX_TIM3_Init+0x124>)
 80006a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;	// todennäköisesti tarpeeton? rajataan pwm-taajuutta.
 80006a8:	4b3b      	ldr	r3, [pc, #236]	; (8000798 <MX_TIM3_Init+0x120>)
 80006aa:	220f      	movs	r2, #15
 80006ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b3a      	ldr	r3, [pc, #232]	; (8000798 <MX_TIM3_Init+0x120>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80006b4:	4b38      	ldr	r3, [pc, #224]	; (8000798 <MX_TIM3_Init+0x120>)
 80006b6:	2263      	movs	r2, #99	; 0x63
 80006b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ba:	4b37      	ldr	r3, [pc, #220]	; (8000798 <MX_TIM3_Init+0x120>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c0:	4b35      	ldr	r3, [pc, #212]	; (8000798 <MX_TIM3_Init+0x120>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006c6:	4834      	ldr	r0, [pc, #208]	; (8000798 <MX_TIM3_Init+0x120>)
 80006c8:	f001 fd0e 	bl	80020e8 <HAL_TIM_Base_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 80006d2:	f7ff ffa5 	bl	8000620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	4619      	mov	r1, r3
 80006e2:	482d      	ldr	r0, [pc, #180]	; (8000798 <MX_TIM3_Init+0x120>)
 80006e4:	f001 fedc 	bl	80024a0 <HAL_TIM_ConfigClockSource>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80006ee:	f7ff ff97 	bl	8000620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006f2:	4829      	ldr	r0, [pc, #164]	; (8000798 <MX_TIM3_Init+0x120>)
 80006f4:	f001 fd40 	bl	8002178 <HAL_TIM_PWM_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80006fe:	f7ff ff8f 	bl	8000620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4619      	mov	r1, r3
 8000710:	4821      	ldr	r0, [pc, #132]	; (8000798 <MX_TIM3_Init+0x120>)
 8000712:	f002 f9a9 	bl	8002a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 800071c:	f7ff ff80 	bl	8000620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000720:	2360      	movs	r3, #96	; 0x60
 8000722:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	4619      	mov	r1, r3
 8000736:	4818      	ldr	r0, [pc, #96]	; (8000798 <MX_TIM3_Init+0x120>)
 8000738:	f001 fdf4 	bl	8002324 <HAL_TIM_PWM_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8000742:	f7ff ff6d 	bl	8000620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	2204      	movs	r2, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4812      	ldr	r0, [pc, #72]	; (8000798 <MX_TIM3_Init+0x120>)
 800074e:	f001 fde9 	bl	8002324 <HAL_TIM_PWM_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000758:	f7ff ff62 	bl	8000620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	2208      	movs	r2, #8
 8000760:	4619      	mov	r1, r3
 8000762:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_TIM3_Init+0x120>)
 8000764:	f001 fdde 	bl	8002324 <HAL_TIM_PWM_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 800076e:	f7ff ff57 	bl	8000620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	220c      	movs	r2, #12
 8000776:	4619      	mov	r1, r3
 8000778:	4807      	ldr	r0, [pc, #28]	; (8000798 <MX_TIM3_Init+0x120>)
 800077a:	f001 fdd3 	bl	8002324 <HAL_TIM_PWM_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8000784:	f7ff ff4c 	bl	8000620 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 8000788:	4803      	ldr	r0, [pc, #12]	; (8000798 <MX_TIM3_Init+0x120>)
 800078a:	f000 f855 	bl	8000838 <HAL_TIM_MspPostInit>

}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	; 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000094 	.word	0x20000094
 800079c:	40000400 	.word	0x40000400

080007a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_MspInit+0x58>)
 80007a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007aa:	4a13      	ldr	r2, [pc, #76]	; (80007f8 <HAL_MspInit+0x58>)
 80007ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b0:	6253      	str	r3, [r2, #36]	; 0x24
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <HAL_MspInit+0x58>)
 80007b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_MspInit+0x58>)
 80007c0:	6a1b      	ldr	r3, [r3, #32]
 80007c2:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <HAL_MspInit+0x58>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6213      	str	r3, [r2, #32]
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <HAL_MspInit+0x58>)
 80007cc:	6a1b      	ldr	r3, [r3, #32]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <HAL_MspInit+0x58>)
 80007d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007da:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <HAL_MspInit+0x58>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6253      	str	r3, [r2, #36]	; 0x24
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_MspInit+0x58>)
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a09      	ldr	r2, [pc, #36]	; (8000830 <HAL_TIM_PWM_MspInit+0x34>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d10b      	bne.n	8000826 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_TIM_PWM_MspInit+0x38>)
 8000810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_TIM_PWM_MspInit+0x38>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6253      	str	r3, [r2, #36]	; 0x24
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_TIM_PWM_MspInit+0x38>)
 800081c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	40000400 	.word	0x40000400
 8000834:	40023800 	.word	0x40023800

08000838 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <HAL_TIM_MspPostInit+0x9c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d137      	bne.n	80008ca <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <HAL_TIM_MspPostInit+0xa0>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <HAL_TIM_MspPostInit+0xa0>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <HAL_TIM_MspPostInit+0xa0>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_TIM_MspPostInit+0xa0>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <HAL_TIM_MspPostInit+0xa0>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	61d3      	str	r3, [r2, #28]
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <HAL_TIM_MspPostInit+0xa0>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800088a:	23c0      	movs	r3, #192	; 0xc0
 800088c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800089a:	2302      	movs	r3, #2
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <HAL_TIM_MspPostInit+0xa4>)
 80008a6:	f000 fcdb 	bl	8001260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008aa:	2303      	movs	r3, #3
 80008ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008ba:	2302      	movs	r3, #2
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <HAL_TIM_MspPostInit+0xa8>)
 80008c6:	f000 fccb 	bl	8001260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40000400 	.word	0x40000400
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020400 	.word	0x40020400

080008e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08e      	sub	sp, #56	; 0x38
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a52      	ldr	r2, [pc, #328]	; (8000a4c <HAL_UART_MspInit+0x168>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d131      	bne.n	800096a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000906:	4b52      	ldr	r3, [pc, #328]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 8000908:	6a1b      	ldr	r3, [r3, #32]
 800090a:	4a51      	ldr	r2, [pc, #324]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6213      	str	r3, [r2, #32]
 8000912:	4b4f      	ldr	r3, [pc, #316]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 8000914:	6a1b      	ldr	r3, [r3, #32]
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	623b      	str	r3, [r7, #32]
 800091c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b4c      	ldr	r3, [pc, #304]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a4b      	ldr	r2, [pc, #300]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b49      	ldr	r3, [pc, #292]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	61fb      	str	r3, [r7, #28]
 8000934:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000936:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000948:	2307      	movs	r3, #7
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	4840      	ldr	r0, [pc, #256]	; (8000a54 <HAL_UART_MspInit+0x170>)
 8000954:	f000 fc84 	bl	8001260 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2025      	movs	r0, #37	; 0x25
 800095e:	f000 fbca 	bl	80010f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000962:	2025      	movs	r0, #37	; 0x25
 8000964:	f000 fbe3 	bl	800112e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000968:	e06b      	b.n	8000a42 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a3a      	ldr	r2, [pc, #232]	; (8000a58 <HAL_UART_MspInit+0x174>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d130      	bne.n	80009d6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000974:	4b36      	ldr	r3, [pc, #216]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 8000976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000978:	4a35      	ldr	r2, [pc, #212]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 800097a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097e:	6253      	str	r3, [r2, #36]	; 0x24
 8000980:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 8000982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	4a2f      	ldr	r2, [pc, #188]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	61d3      	str	r3, [r2, #28]
 8000998:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 800099a:	69db      	ldr	r3, [r3, #28]
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a4:	230c      	movs	r3, #12
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b4:	2307      	movs	r3, #7
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	4825      	ldr	r0, [pc, #148]	; (8000a54 <HAL_UART_MspInit+0x170>)
 80009c0:	f000 fc4e 	bl	8001260 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2026      	movs	r0, #38	; 0x26
 80009ca:	f000 fb94 	bl	80010f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009ce:	2026      	movs	r0, #38	; 0x26
 80009d0:	f000 fbad 	bl	800112e <HAL_NVIC_EnableIRQ>
}
 80009d4:	e035      	b.n	8000a42 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART3)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <HAL_UART_MspInit+0x178>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d130      	bne.n	8000a42 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 80009e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e4:	4a1a      	ldr	r2, [pc, #104]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 80009e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ea:	6253      	str	r3, [r2, #36]	; 0x24
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 80009ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 80009fa:	69db      	ldr	r3, [r3, #28]
 80009fc:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	61d3      	str	r3, [r2, #28]
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_UART_MspInit+0x16c>)
 8000a06:	69db      	ldr	r3, [r3, #28]
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a22:	2307      	movs	r3, #7
 8000a24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <HAL_UART_MspInit+0x17c>)
 8000a2e:	f000 fc17 	bl	8001260 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2027      	movs	r0, #39	; 0x27
 8000a38:	f000 fb5d 	bl	80010f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a3c:	2027      	movs	r0, #39	; 0x27
 8000a3e:	f000 fb76 	bl	800112e <HAL_NVIC_EnableIRQ>
}
 8000a42:	bf00      	nop
 8000a44:	3738      	adds	r7, #56	; 0x38
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40013800 	.word	0x40013800
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	40004800 	.word	0x40004800
 8000a60:	40020400 	.word	0x40020400

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr

08000a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aaa:	f000 fa0f 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <USART1_IRQHandler+0x10>)
 8000aba:	f002 f9b5 	bl	8002e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000d8 	.word	0x200000d8

08000ac8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <USART2_IRQHandler+0x10>)
 8000ace:	f002 f9ab 	bl	8002e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000011c 	.word	0x2000011c

08000adc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <USART3_IRQHandler+0x10>)
 8000ae2:	f002 f9a1 	bl	8002e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000160 	.word	0x20000160

08000af0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e00a      	b.n	8000b18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b02:	f3af 8000 	nop.w
 8000b06:	4601      	mov	r1, r0
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	60ba      	str	r2, [r7, #8]
 8000b0e:	b2ca      	uxtb	r2, r1
 8000b10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf0      	blt.n	8000b02 <_read+0x12>
	}

return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
	return -1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b50:	605a      	str	r2, [r3, #4]
	return 0;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <_isatty>:

int _isatty(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
	return 1;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr

08000b72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b085      	sub	sp, #20
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
	return 0;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
	...

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f002 fd82 	bl	80036c4 <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20014000 	.word	0x20014000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	200000d4 	.word	0x200000d4
 8000bf4:	200001c0 	.word	0x200001c0

08000bf8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <us100_init>:
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);

void us100_init()
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	MX_USART1_UART_Init();
 8000c08:	f000 f86a 	bl	8000ce0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000c0c:	f000 f892 	bl	8000d34 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000c10:	f000 f8ba 	bl	8000d88 <MX_USART3_UART_Init>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <get_dist>:

int16_t get_dist(uint8_t sensor)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]

	switch (sensor){
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d024      	beq.n	8000c72 <get_dist+0x5a>
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	dc31      	bgt.n	8000c90 <get_dist+0x78>
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d002      	beq.n	8000c36 <get_dist+0x1e>
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d00f      	beq.n	8000c54 <get_dist+0x3c>
 8000c34:	e02c      	b.n	8000c90 <get_dist+0x78>
	case 1:
		HAL_UART_Transmit(&huart1, cmd_dist, 1, HAL_MAX_DELAY);
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4922      	ldr	r1, [pc, #136]	; (8000cc8 <get_dist+0xb0>)
 8000c3e:	4823      	ldr	r0, [pc, #140]	; (8000ccc <get_dist+0xb4>)
 8000c40:	f001 ffbd 	bl	8002bbe <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, buffer, 2, HAL_MAX_DELAY);
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295
 8000c48:	2202      	movs	r2, #2
 8000c4a:	4921      	ldr	r1, [pc, #132]	; (8000cd0 <get_dist+0xb8>)
 8000c4c:	481f      	ldr	r0, [pc, #124]	; (8000ccc <get_dist+0xb4>)
 8000c4e:	f002 f848 	bl	8002ce2 <HAL_UART_Receive>
		break;
 8000c52:	e01d      	b.n	8000c90 <get_dist+0x78>
	case 2:
		HAL_UART_Transmit(&huart2, cmd_dist, 1, HAL_MAX_DELAY);
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	2201      	movs	r2, #1
 8000c5a:	491b      	ldr	r1, [pc, #108]	; (8000cc8 <get_dist+0xb0>)
 8000c5c:	481d      	ldr	r0, [pc, #116]	; (8000cd4 <get_dist+0xbc>)
 8000c5e:	f001 ffae 	bl	8002bbe <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, buffer, 2, HAL_MAX_DELAY);
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	2202      	movs	r2, #2
 8000c68:	4919      	ldr	r1, [pc, #100]	; (8000cd0 <get_dist+0xb8>)
 8000c6a:	481a      	ldr	r0, [pc, #104]	; (8000cd4 <get_dist+0xbc>)
 8000c6c:	f002 f839 	bl	8002ce2 <HAL_UART_Receive>
		break;
 8000c70:	e00e      	b.n	8000c90 <get_dist+0x78>
	case 3:
		HAL_UART_Transmit(&huart3, cmd_dist, 1, HAL_MAX_DELAY);
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	2201      	movs	r2, #1
 8000c78:	4913      	ldr	r1, [pc, #76]	; (8000cc8 <get_dist+0xb0>)
 8000c7a:	4817      	ldr	r0, [pc, #92]	; (8000cd8 <get_dist+0xc0>)
 8000c7c:	f001 ff9f 	bl	8002bbe <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, buffer, 2, HAL_MAX_DELAY);
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295
 8000c84:	2202      	movs	r2, #2
 8000c86:	4912      	ldr	r1, [pc, #72]	; (8000cd0 <get_dist+0xb8>)
 8000c88:	4813      	ldr	r0, [pc, #76]	; (8000cd8 <get_dist+0xc0>)
 8000c8a:	f002 f82a 	bl	8002ce2 <HAL_UART_Receive>
		break;
 8000c8e:	bf00      	nop
	}

	dist = (buffer[0] << 8) + buffer[1];
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <get_dist+0xb8>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <get_dist+0xb8>)
 8000c9c:	785b      	ldrb	r3, [r3, #1]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	4413      	add	r3, r2
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <get_dist+0xc4>)
 8000ca6:	801a      	strh	r2, [r3, #0]

	if (dist < 1000){
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <get_dist+0xc4>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cb0:	d203      	bcs.n	8000cba <get_dist+0xa2>
		return dist;
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <get_dist+0xc4>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	e001      	b.n	8000cbe <get_dist+0xa6>
	}

	return -1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000004 	.word	0x20000004
 8000ccc:	200000d8 	.word	0x200000d8
 8000cd0:	200001a8 	.word	0x200001a8
 8000cd4:	2000011c 	.word	0x2000011c
 8000cd8:	20000160 	.word	0x20000160
 8000cdc:	200001a4 	.word	0x200001a4

08000ce0 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_USART1_UART_Init+0x4c>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <MX_USART1_UART_Init+0x50>)
 8000ce8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <MX_USART1_UART_Init+0x4c>)
 8000cec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_USART1_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_USART1_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_USART1_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_USART1_UART_Init+0x4c>)
 8000d06:	220c      	movs	r2, #12
 8000d08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_USART1_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_USART1_UART_Init+0x4c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_USART1_UART_Init+0x4c>)
 8000d18:	f001 ff04 	bl	8002b24 <HAL_UART_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d22:	f7ff fc7d 	bl	8000620 <Error_Handler>
  }
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200000d8 	.word	0x200000d8
 8000d30:	40013800 	.word	0x40013800

08000d34 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <MX_USART2_UART_Init+0x50>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d6c:	f001 feda 	bl	8002b24 <HAL_UART_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d76:	f7ff fc53 	bl	8000620 <Error_Handler>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000011c 	.word	0x2000011c
 8000d84:	40004400 	.word	0x40004400

08000d88 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <MX_USART3_UART_Init+0x50>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000d94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000dc0:	f001 feb0 	bl	8002b24 <HAL_UART_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000dca:	f7ff fc29 	bl	8000620 <Error_Handler>
  }
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000160 	.word	0x20000160
 8000dd8:	40004800 	.word	0x40004800

08000ddc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ddc:	480c      	ldr	r0, [pc, #48]	; (8000e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dde:	490d      	ldr	r1, [pc, #52]	; (8000e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df4:	4c0a      	ldr	r4, [pc, #40]	; (8000e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e02:	f7ff fef9 	bl	8000bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e06:	f002 fc63 	bl	80036d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e0a:	f7ff fb7f 	bl	800050c <main>
  bx lr
 8000e0e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e18:	08004740 	.word	0x08004740
  ldr r2, =_sbss
 8000e1c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e20:	200001c0 	.word	0x200001c0

08000e24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC1_IRQHandler>

08000e26 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f955 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e36:	200f      	movs	r0, #15
 8000e38:	f000 f80e 	bl	8000e58 <HAL_InitTick>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	e001      	b.n	8000e4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e48:	f7ff fcaa 	bl	80007a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_InitTick+0x68>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d022      	beq.n	8000eb2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_InitTick+0x6c>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_InitTick+0x68>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 f962 	bl	800114a <HAL_SYSTICK_Config>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d10f      	bne.n	8000eac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b0f      	cmp	r3, #15
 8000e90:	d809      	bhi.n	8000ea6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e92:	2200      	movs	r2, #0
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9a:	f000 f92c 	bl	80010f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_InitTick+0x70>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	e007      	b.n	8000eb6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	e004      	b.n	8000eb6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	e001      	b.n	8000eb6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000000c 	.word	0x2000000c
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000008 	.word	0x20000008

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_IncTick+0x1c>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_IncTick+0x20>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <HAL_IncTick+0x1c>)
 8000edc:	6013      	str	r3, [r2, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200001ac 	.word	0x200001ac
 8000eec:	2000000c 	.word	0x2000000c

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <HAL_GetTick+0x10>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	200001ac 	.word	0x200001ac

08000f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff fff0 	bl	8000ef0 <HAL_GetTick>
 8000f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1c:	d004      	beq.n	8000f28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_Delay+0x40>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4413      	add	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f28:	bf00      	nop
 8000f2a:	f7ff ffe1 	bl	8000ef0 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d8f7      	bhi.n	8000f2a <HAL_Delay+0x26>
  {
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000000c 	.word	0x2000000c

08000f48 <__NVIC_SetPriorityGrouping>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_EnableIRQ>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4906      	ldr	r1, [pc, #24]	; (8000fe0 <__NVIC_EnableIRQ+0x34>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <__NVIC_SetPriority>:
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	; (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	; (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <SysTick_Config>:
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff90 	bl	8000fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff2d 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff42 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff90 	bl	8001038 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5f 	bl	8000fe4 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff35 	bl	8000fac <__NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffa2 	bl	800109c <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001162:	b480      	push	{r7}
 8001164:	b085      	sub	sp, #20
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d008      	beq.n	800118c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2204      	movs	r2, #4
 800117e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e022      	b.n	80011d2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 020e 	bic.w	r2, r2, #14
 800119a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f003 021c 	and.w	r2, r3, #28
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b8:	2101      	movs	r1, #1
 80011ba:	fa01 f202 	lsl.w	r2, r1, r2
 80011be:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d005      	beq.n	8001200 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2204      	movs	r2, #4
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	73fb      	strb	r3, [r7, #15]
 80011fe:	e029      	b.n	8001254 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 020e 	bic.w	r2, r2, #14
 800120e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0201 	bic.w	r2, r2, #1
 800121e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f003 021c 	and.w	r2, r3, #28
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122c:	2101      	movs	r1, #1
 800122e:	fa01 f202 	lsl.w	r2, r1, r2
 8001232:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	4798      	blx	r3
    }
  }
  return status;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001276:	e160      	b.n	800153a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	2101      	movs	r1, #1
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	4013      	ands	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8152 	beq.w	8001534 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b01      	cmp	r3, #1
 800129a:	d005      	beq.n	80012a8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d130      	bne.n	800130a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80012de:	2201      	movs	r2, #1
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	091b      	lsrs	r3, r3, #4
 80012f4:	f003 0201 	and.w	r2, r3, #1
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	2b03      	cmp	r3, #3
 8001314:	d017      	beq.n	8001346 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d123      	bne.n	800139a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	08da      	lsrs	r2, r3, #3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3208      	adds	r2, #8
 800135a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	220f      	movs	r2, #15
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	691a      	ldr	r2, [r3, #16]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	6939      	ldr	r1, [r7, #16]
 8001396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 0203 	and.w	r2, r3, #3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 80ac 	beq.w	8001534 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013dc:	4b5e      	ldr	r3, [pc, #376]	; (8001558 <HAL_GPIO_Init+0x2f8>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4a5d      	ldr	r2, [pc, #372]	; (8001558 <HAL_GPIO_Init+0x2f8>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6213      	str	r3, [r2, #32]
 80013e8:	4b5b      	ldr	r3, [pc, #364]	; (8001558 <HAL_GPIO_Init+0x2f8>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80013f4:	4a59      	ldr	r2, [pc, #356]	; (800155c <HAL_GPIO_Init+0x2fc>)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001400:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	220f      	movs	r2, #15
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a51      	ldr	r2, [pc, #324]	; (8001560 <HAL_GPIO_Init+0x300>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d025      	beq.n	800146c <HAL_GPIO_Init+0x20c>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a50      	ldr	r2, [pc, #320]	; (8001564 <HAL_GPIO_Init+0x304>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d01f      	beq.n	8001468 <HAL_GPIO_Init+0x208>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a4f      	ldr	r2, [pc, #316]	; (8001568 <HAL_GPIO_Init+0x308>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d019      	beq.n	8001464 <HAL_GPIO_Init+0x204>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a4e      	ldr	r2, [pc, #312]	; (800156c <HAL_GPIO_Init+0x30c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d013      	beq.n	8001460 <HAL_GPIO_Init+0x200>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a4d      	ldr	r2, [pc, #308]	; (8001570 <HAL_GPIO_Init+0x310>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d00d      	beq.n	800145c <HAL_GPIO_Init+0x1fc>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a4c      	ldr	r2, [pc, #304]	; (8001574 <HAL_GPIO_Init+0x314>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d007      	beq.n	8001458 <HAL_GPIO_Init+0x1f8>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a4b      	ldr	r2, [pc, #300]	; (8001578 <HAL_GPIO_Init+0x318>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d101      	bne.n	8001454 <HAL_GPIO_Init+0x1f4>
 8001450:	2306      	movs	r3, #6
 8001452:	e00c      	b.n	800146e <HAL_GPIO_Init+0x20e>
 8001454:	2307      	movs	r3, #7
 8001456:	e00a      	b.n	800146e <HAL_GPIO_Init+0x20e>
 8001458:	2305      	movs	r3, #5
 800145a:	e008      	b.n	800146e <HAL_GPIO_Init+0x20e>
 800145c:	2304      	movs	r3, #4
 800145e:	e006      	b.n	800146e <HAL_GPIO_Init+0x20e>
 8001460:	2303      	movs	r3, #3
 8001462:	e004      	b.n	800146e <HAL_GPIO_Init+0x20e>
 8001464:	2302      	movs	r3, #2
 8001466:	e002      	b.n	800146e <HAL_GPIO_Init+0x20e>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <HAL_GPIO_Init+0x20e>
 800146c:	2300      	movs	r3, #0
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	f002 0203 	and.w	r2, r2, #3
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	4093      	lsls	r3, r2
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800147e:	4937      	ldr	r1, [pc, #220]	; (800155c <HAL_GPIO_Init+0x2fc>)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3302      	adds	r3, #2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148c:	4b3b      	ldr	r3, [pc, #236]	; (800157c <HAL_GPIO_Init+0x31c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014b0:	4a32      	ldr	r2, [pc, #200]	; (800157c <HAL_GPIO_Init+0x31c>)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <HAL_GPIO_Init+0x31c>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014da:	4a28      	ldr	r2, [pc, #160]	; (800157c <HAL_GPIO_Init+0x31c>)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_GPIO_Init+0x31c>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001504:	4a1d      	ldr	r2, [pc, #116]	; (800157c <HAL_GPIO_Init+0x31c>)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_GPIO_Init+0x31c>)
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <HAL_GPIO_Init+0x31c>)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	fa22 f303 	lsr.w	r3, r2, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	f47f ae97 	bne.w	8001278 <HAL_GPIO_Init+0x18>
  }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40010000 	.word	0x40010000
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40020800 	.word	0x40020800
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40021000 	.word	0x40021000
 8001574:	40021400 	.word	0x40021400
 8001578:	40021800 	.word	0x40021800
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e31d      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001592:	4b94      	ldr	r3, [pc, #592]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800159c:	4b91      	ldr	r3, [pc, #580]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d07b      	beq.n	80016aa <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d006      	beq.n	80015c6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b0c      	cmp	r3, #12
 80015bc:	d10f      	bne.n	80015de <HAL_RCC_OscConfig+0x5e>
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c4:	d10b      	bne.n	80015de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c6:	4b87      	ldr	r3, [pc, #540]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d06a      	beq.n	80016a8 <HAL_RCC_OscConfig+0x128>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d166      	bne.n	80016a8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e2f7      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d106      	bne.n	80015f4 <HAL_RCC_OscConfig+0x74>
 80015e6:	4b7f      	ldr	r3, [pc, #508]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a7e      	ldr	r2, [pc, #504]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e02d      	b.n	8001650 <HAL_RCC_OscConfig+0xd0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10c      	bne.n	8001616 <HAL_RCC_OscConfig+0x96>
 80015fc:	4b79      	ldr	r3, [pc, #484]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a78      	ldr	r2, [pc, #480]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b76      	ldr	r3, [pc, #472]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a75      	ldr	r2, [pc, #468]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	e01c      	b.n	8001650 <HAL_RCC_OscConfig+0xd0>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0xb8>
 800161e:	4b71      	ldr	r3, [pc, #452]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a70      	ldr	r2, [pc, #448]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b6e      	ldr	r3, [pc, #440]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6d      	ldr	r2, [pc, #436]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0xd0>
 8001638:	4b6a      	ldr	r3, [pc, #424]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a69      	ldr	r2, [pc, #420]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800163e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b67      	ldr	r3, [pc, #412]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a66      	ldr	r2, [pc, #408]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fc4a 	bl	8000ef0 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fc46 	bl	8000ef0 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e2ad      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001672:	4b5c      	ldr	r3, [pc, #368]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0xe0>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fc36 	bl	8000ef0 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fc32 	bl	8000ef0 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e299      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800169a:	4b52      	ldr	r3, [pc, #328]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x108>
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d05a      	beq.n	800176c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b0c      	cmp	r3, #12
 80016c0:	d119      	bne.n	80016f6 <HAL_RCC_OscConfig+0x176>
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d116      	bne.n	80016f6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c8:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_OscConfig+0x160>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e276      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e0:	4b40      	ldr	r3, [pc, #256]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	493d      	ldr	r1, [pc, #244]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f4:	e03a      	b.n	800176c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d020      	beq.n	8001740 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fe:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <HAL_RCC_OscConfig+0x268>)
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fbf4 	bl	8000ef0 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff fbf0 	bl	8000ef0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e257      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800171e:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	492a      	ldr	r1, [pc, #168]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
 800173e:	e015      	b.n	800176c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001740:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <HAL_RCC_OscConfig+0x268>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff fbd3 	bl	8000ef0 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fbcf 	bl	8000ef0 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e236      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001760:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80b8 	beq.w	80018ea <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d170      	bne.n	8001862 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_OscConfig+0x218>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e21a      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1a      	ldr	r2, [r3, #32]
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d921      	bls.n	80017ec <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fc3b 	bl	8002028 <RCC_SetFlashLatencyFromMSIRange>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e208      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4906      	ldr	r1, [pc, #24]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	061b      	lsls	r3, r3, #24
 80017dc:	4901      	ldr	r1, [pc, #4]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
 80017e2:	e020      	b.n	8001826 <HAL_RCC_OscConfig+0x2a6>
 80017e4:	40023800 	.word	0x40023800
 80017e8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ec:	4b99      	ldr	r3, [pc, #612]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4996      	ldr	r1, [pc, #600]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017fe:	4b95      	ldr	r3, [pc, #596]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	061b      	lsls	r3, r3, #24
 800180c:	4991      	ldr	r1, [pc, #580]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fc06 	bl	8002028 <RCC_SetFlashLatencyFromMSIRange>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e1d3      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	0b5b      	lsrs	r3, r3, #13
 800182c:	3301      	adds	r3, #1
 800182e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001836:	4a87      	ldr	r2, [pc, #540]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 8001838:	6892      	ldr	r2, [r2, #8]
 800183a:	0912      	lsrs	r2, r2, #4
 800183c:	f002 020f 	and.w	r2, r2, #15
 8001840:	4985      	ldr	r1, [pc, #532]	; (8001a58 <HAL_RCC_OscConfig+0x4d8>)
 8001842:	5c8a      	ldrb	r2, [r1, r2]
 8001844:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001846:	4a85      	ldr	r2, [pc, #532]	; (8001a5c <HAL_RCC_OscConfig+0x4dc>)
 8001848:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800184a:	4b85      	ldr	r3, [pc, #532]	; (8001a60 <HAL_RCC_OscConfig+0x4e0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fb02 	bl	8000e58 <HAL_InitTick>
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d045      	beq.n	80018ea <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	e1b5      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d029      	beq.n	80018be <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800186a:	4b7e      	ldr	r3, [pc, #504]	; (8001a64 <HAL_RCC_OscConfig+0x4e4>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fb3e 	bl	8000ef0 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001878:	f7ff fb3a 	bl	8000ef0 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1a1      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800188a:	4b72      	ldr	r3, [pc, #456]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001896:	4b6f      	ldr	r3, [pc, #444]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	496c      	ldr	r1, [pc, #432]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a8:	4b6a      	ldr	r3, [pc, #424]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	4967      	ldr	r1, [pc, #412]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018be:	4b69      	ldr	r3, [pc, #420]	; (8001a64 <HAL_RCC_OscConfig+0x4e4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fb14 	bl	8000ef0 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018cc:	f7ff fb10 	bl	8000ef0 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e177      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018de:	4b5d      	ldr	r3, [pc, #372]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d030      	beq.n	8001958 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d016      	beq.n	800192c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fe:	4b5a      	ldr	r3, [pc, #360]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7ff faf4 	bl	8000ef0 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff faf0 	bl	8000ef0 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e157      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800191e:	4b4d      	ldr	r3, [pc, #308]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 8001920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x38c>
 800192a:	e015      	b.n	8001958 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192c:	4b4e      	ldr	r3, [pc, #312]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff fadd 	bl	8000ef0 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff fad9 	bl	8000ef0 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e140      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800194c:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 800194e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80b5 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196a:	4b3a      	ldr	r3, [pc, #232]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10d      	bne.n	8001992 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	4a36      	ldr	r2, [pc, #216]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	6253      	str	r3, [r2, #36]	; 0x24
 8001982:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198e:	2301      	movs	r3, #1
 8001990:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <HAL_RCC_OscConfig+0x4ec>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d118      	bne.n	80019d0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199e:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <HAL_RCC_OscConfig+0x4ec>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a32      	ldr	r2, [pc, #200]	; (8001a6c <HAL_RCC_OscConfig+0x4ec>)
 80019a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019aa:	f7ff faa1 	bl	8000ef0 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b2:	f7ff fa9d 	bl	8000ef0 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b64      	cmp	r3, #100	; 0x64
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e104      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c4:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <HAL_RCC_OscConfig+0x4ec>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x466>
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 80019da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019dc:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e2:	6353      	str	r3, [r2, #52]	; 0x34
 80019e4:	e02d      	b.n	8001a42 <HAL_RCC_OscConfig+0x4c2>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x488>
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 80019f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f2:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 80019f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f8:	6353      	str	r3, [r2, #52]	; 0x34
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 80019fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 8001a00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a04:	6353      	str	r3, [r2, #52]	; 0x34
 8001a06:	e01c      	b.n	8001a42 <HAL_RCC_OscConfig+0x4c2>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	d10c      	bne.n	8001a2a <HAL_RCC_OscConfig+0x4aa>
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 8001a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a14:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 8001a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1a:	6353      	str	r3, [r2, #52]	; 0x34
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a20:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6353      	str	r3, [r2, #52]	; 0x34
 8001a28:	e00b      	b.n	8001a42 <HAL_RCC_OscConfig+0x4c2>
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 8001a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2e:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 8001a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a34:	6353      	str	r3, [r2, #52]	; 0x34
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 8001a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3a:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_RCC_OscConfig+0x4d4>)
 8001a3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a40:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d024      	beq.n	8001a94 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fa51 	bl	8000ef0 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a50:	e019      	b.n	8001a86 <HAL_RCC_OscConfig+0x506>
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	08004680 	.word	0x08004680
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000008 	.word	0x20000008
 8001a64:	42470020 	.word	0x42470020
 8001a68:	42470680 	.word	0x42470680
 8001a6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a70:	f7ff fa3e 	bl	8000ef0 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e0a3      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a86:	4b54      	ldr	r3, [pc, #336]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0ee      	beq.n	8001a70 <HAL_RCC_OscConfig+0x4f0>
 8001a92:	e014      	b.n	8001abe <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a94:	f7ff fa2c 	bl	8000ef0 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fa28 	bl	8000ef0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e08d      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ab2:	4b49      	ldr	r3, [pc, #292]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ee      	bne.n	8001a9c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001abe:	7ffb      	ldrb	r3, [r7, #31]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac4:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	4a43      	ldr	r2, [pc, #268]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ace:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d079      	beq.n	8001bcc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2b0c      	cmp	r3, #12
 8001adc:	d056      	beq.n	8001b8c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d13b      	bne.n	8001b5e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <HAL_RCC_OscConfig+0x65c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fa00 	bl	8000ef0 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff f9fc 	bl	8000ef0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e063      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b12:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	4319      	orrs	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	492b      	ldr	r1, [pc, #172]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HAL_RCC_OscConfig+0x65c>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7ff f9db 	bl	8000ef0 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7ff f9d7 	bl	8000ef0 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e03e      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x5be>
 8001b5c:	e036      	b.n	8001bcc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <HAL_RCC_OscConfig+0x65c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff f9c4 	bl	8000ef0 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff f9c0 	bl	8000ef0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e027      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x5ec>
 8001b8a:	e01f      	b.n	8001bcc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e01a      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d10d      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d106      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3720      	adds	r7, #32
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	42470060 	.word	0x42470060

08001be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e11a      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b8f      	ldr	r3, [pc, #572]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d919      	bls.n	8001c36 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d105      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x34>
 8001c08:	4b8a      	ldr	r3, [pc, #552]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a89      	ldr	r2, [pc, #548]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b87      	ldr	r3, [pc, #540]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 0201 	bic.w	r2, r3, #1
 8001c1c:	4985      	ldr	r1, [pc, #532]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c24:	4b83      	ldr	r3, [pc, #524]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0f9      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d008      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c42:	4b7d      	ldr	r3, [pc, #500]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	497a      	ldr	r1, [pc, #488]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 808e 	beq.w	8001d7e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c6a:	4b73      	ldr	r3, [pc, #460]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d121      	bne.n	8001cba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0d7      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c82:	4b6d      	ldr	r3, [pc, #436]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d115      	bne.n	8001cba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0cb      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c9a:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0bf      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001caa:	4b63      	ldr	r3, [pc, #396]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e0b7      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cba:	4b5f      	ldr	r3, [pc, #380]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f023 0203 	bic.w	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	495c      	ldr	r1, [pc, #368]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ccc:	f7ff f910 	bl	8000ef0 <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d112      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7ff f908 	bl	8000ef0 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e09b      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cf2:	4b51      	ldr	r3, [pc, #324]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d1ee      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xfc>
 8001cfe:	e03e      	b.n	8001d7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d112      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0a:	f7ff f8f1 	bl	8000ef0 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e084      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d20:	4b45      	ldr	r3, [pc, #276]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b0c      	cmp	r3, #12
 8001d2a:	d1ee      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x12a>
 8001d2c:	e027      	b.n	8001d7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d11d      	bne.n	8001d72 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d38:	f7ff f8da 	bl	8000ef0 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e06d      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d1ee      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x158>
 8001d5a:	e010      	b.n	8001d7e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5c:	f7ff f8c8 	bl	8000ef0 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e05b      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d72:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1ee      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d219      	bcs.n	8001dc0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d105      	bne.n	8001d9e <HAL_RCC_ClockConfig+0x1be>
 8001d92:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a27      	ldr	r2, [pc, #156]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0201 	bic.w	r2, r3, #1
 8001da6:	4923      	ldr	r1, [pc, #140]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e034      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4917      	ldr	r1, [pc, #92]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	490f      	ldr	r1, [pc, #60]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dfe:	f000 f823 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	490b      	ldr	r1, [pc, #44]	; (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001e10:	5ccb      	ldrb	r3, [r1, r3]
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f81a 	bl	8000e58 <HAL_InitTick>
 8001e24:	4603      	mov	r3, r0
 8001e26:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e28:	7afb      	ldrb	r3, [r7, #11]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023c00 	.word	0x40023c00
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	08004680 	.word	0x08004680
 8001e40:	20000000 	.word	0x20000000
 8001e44:	20000008 	.word	0x20000008

08001e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e4c:	b08e      	sub	sp, #56	; 0x38
 8001e4e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e50:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b0c      	cmp	r3, #12
 8001e5e:	d00d      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x34>
 8001e60:	2b0c      	cmp	r3, #12
 8001e62:	f200 8092 	bhi.w	8001f8a <HAL_RCC_GetSysClockFreq+0x142>
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d002      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0x28>
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d003      	beq.n	8001e76 <HAL_RCC_GetSysClockFreq+0x2e>
 8001e6e:	e08c      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e70:	4b51      	ldr	r3, [pc, #324]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x170>)
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e74:	e097      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e76:	4b51      	ldr	r3, [pc, #324]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x174>)
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e7a:	e094      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	0c9b      	lsrs	r3, r3, #18
 8001e80:	f003 020f 	and.w	r2, r3, #15
 8001e84:	4b4e      	ldr	r3, [pc, #312]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x178>)
 8001e86:	5c9b      	ldrb	r3, [r3, r2]
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8c:	0d9b      	lsrs	r3, r3, #22
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	3301      	adds	r3, #1
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e96:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d021      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	61fa      	str	r2, [r7, #28]
 8001eaa:	4b44      	ldr	r3, [pc, #272]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x174>)
 8001eac:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001eb0:	464a      	mov	r2, r9
 8001eb2:	fb03 f202 	mul.w	r2, r3, r2
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	4644      	mov	r4, r8
 8001eba:	fb04 f303 	mul.w	r3, r4, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a3e      	ldr	r2, [pc, #248]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x174>)
 8001ec2:	4644      	mov	r4, r8
 8001ec4:	fba4 0102 	umull	r0, r1, r4, r2
 8001ec8:	440b      	add	r3, r1
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	2200      	movs	r2, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	617a      	str	r2, [r7, #20]
 8001ed4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ed8:	f7fe f950 	bl	800017c <__aeabi_uldivmod>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ee4:	e04e      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee8:	2200      	movs	r2, #0
 8001eea:	469a      	mov	sl, r3
 8001eec:	4693      	mov	fp, r2
 8001eee:	4652      	mov	r2, sl
 8001ef0:	465b      	mov	r3, fp
 8001ef2:	f04f 0000 	mov.w	r0, #0
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	0159      	lsls	r1, r3, #5
 8001efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f00:	0150      	lsls	r0, r2, #5
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	ebb2 080a 	subs.w	r8, r2, sl
 8001f0a:	eb63 090b 	sbc.w	r9, r3, fp
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f22:	ebb2 0408 	subs.w	r4, r2, r8
 8001f26:	eb63 0509 	sbc.w	r5, r3, r9
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	00eb      	lsls	r3, r5, #3
 8001f34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f38:	00e2      	lsls	r2, r4, #3
 8001f3a:	4614      	mov	r4, r2
 8001f3c:	461d      	mov	r5, r3
 8001f3e:	eb14 030a 	adds.w	r3, r4, sl
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	eb45 030b 	adc.w	r3, r5, fp
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f56:	4629      	mov	r1, r5
 8001f58:	028b      	lsls	r3, r1, #10
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	4604      	mov	r4, r0
 8001f60:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001f64:	4601      	mov	r1, r0
 8001f66:	028a      	lsls	r2, r1, #10
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	60fa      	str	r2, [r7, #12]
 8001f74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f78:	f7fe f900 	bl	800017c <__aeabi_uldivmod>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4613      	mov	r3, r2
 8001f82:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8001f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f88:	e00d      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	0b5b      	lsrs	r3, r3, #13
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3738      	adds	r7, #56	; 0x38
 8001fac:	46bd      	mov	sp, r7
 8001fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	00f42400 	.word	0x00f42400
 8001fbc:	016e3600 	.word	0x016e3600
 8001fc0:	08004674 	.word	0x08004674

08001fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc8:	4b02      	ldr	r3, [pc, #8]	; (8001fd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	20000000 	.word	0x20000000

08001fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fdc:	f7ff fff2 	bl	8001fc4 <HAL_RCC_GetHCLKFreq>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	4903      	ldr	r1, [pc, #12]	; (8001ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fee:	5ccb      	ldrb	r3, [r1, r3]
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	08004690 	.word	0x08004690

08002000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002004:	f7ff ffde 	bl	8001fc4 <HAL_RCC_GetHCLKFreq>
 8002008:	4602      	mov	r2, r0
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	0adb      	lsrs	r3, r3, #11
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	4903      	ldr	r1, [pc, #12]	; (8002024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002016:	5ccb      	ldrb	r3, [r1, r3]
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800201c:	4618      	mov	r0, r3
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	08004690 	.word	0x08004690

08002028 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002034:	4b29      	ldr	r3, [pc, #164]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d12c      	bne.n	800209a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002040:	4b26      	ldr	r3, [pc, #152]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e016      	b.n	8002086 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002058:	4b20      	ldr	r3, [pc, #128]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	4a1f      	ldr	r2, [pc, #124]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800205e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002062:	6253      	str	r3, [r2, #36]	; 0x24
 8002064:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002078:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800207a:	4b18      	ldr	r3, [pc, #96]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	4a17      	ldr	r2, [pc, #92]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002084:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800208c:	d105      	bne.n	800209a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002094:	d101      	bne.n	800209a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002096:	2301      	movs	r3, #1
 8002098:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d105      	bne.n	80020ac <RCC_SetFlashLatencyFromMSIRange+0x84>
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f023 0201 	bic.w	r2, r3, #1
 80020b4:	490b      	ldr	r1, [pc, #44]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d001      	beq.n	80020ce <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40007000 	.word	0x40007000
 80020e4:	40023c00 	.word	0x40023c00

080020e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e031      	b.n	800215e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f829 	bl	8002166 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3304      	adds	r3, #4
 8002124:	4619      	mov	r1, r3
 8002126:	4610      	mov	r0, r2
 8002128:	f000 fa7e 	bl	8002628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e031      	b.n	80021ee <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fb2c 	bl	80007fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f000 fa36 	bl	8002628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d109      	bne.n	800221c <HAL_TIM_PWM_Start+0x24>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b01      	cmp	r3, #1
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	e022      	b.n	8002262 <HAL_TIM_PWM_Start+0x6a>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b04      	cmp	r3, #4
 8002220:	d109      	bne.n	8002236 <HAL_TIM_PWM_Start+0x3e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b01      	cmp	r3, #1
 800222c:	bf14      	ite	ne
 800222e:	2301      	movne	r3, #1
 8002230:	2300      	moveq	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	e015      	b.n	8002262 <HAL_TIM_PWM_Start+0x6a>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d109      	bne.n	8002250 <HAL_TIM_PWM_Start+0x58>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	bf14      	ite	ne
 8002248:	2301      	movne	r3, #1
 800224a:	2300      	moveq	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	e008      	b.n	8002262 <HAL_TIM_PWM_Start+0x6a>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b01      	cmp	r3, #1
 800225a:	bf14      	ite	ne
 800225c:	2301      	movne	r3, #1
 800225e:	2300      	moveq	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e051      	b.n	800230e <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d104      	bne.n	800227a <HAL_TIM_PWM_Start+0x82>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002278:	e013      	b.n	80022a2 <HAL_TIM_PWM_Start+0xaa>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b04      	cmp	r3, #4
 800227e:	d104      	bne.n	800228a <HAL_TIM_PWM_Start+0x92>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002288:	e00b      	b.n	80022a2 <HAL_TIM_PWM_Start+0xaa>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b08      	cmp	r3, #8
 800228e:	d104      	bne.n	800229a <HAL_TIM_PWM_Start+0xa2>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002298:	e003      	b.n	80022a2 <HAL_TIM_PWM_Start+0xaa>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2201      	movs	r2, #1
 80022a8:	6839      	ldr	r1, [r7, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fbb7 	bl	8002a1e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b8:	d00e      	beq.n	80022d8 <HAL_TIM_PWM_Start+0xe0>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a16      	ldr	r2, [pc, #88]	; (8002318 <HAL_TIM_PWM_Start+0x120>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d009      	beq.n	80022d8 <HAL_TIM_PWM_Start+0xe0>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <HAL_TIM_PWM_Start+0x124>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_TIM_PWM_Start+0xe0>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a13      	ldr	r2, [pc, #76]	; (8002320 <HAL_TIM_PWM_Start+0x128>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d111      	bne.n	80022fc <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d010      	beq.n	800230c <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fa:	e007      	b.n	800230c <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40000400 	.word	0x40000400
 800231c:	40000800 	.word	0x40000800
 8002320:	40010800 	.word	0x40010800

08002324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800233a:	2302      	movs	r3, #2
 800233c:	e0ac      	b.n	8002498 <HAL_TIM_PWM_ConfigChannel+0x174>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	f200 809f 	bhi.w	800248c <HAL_TIM_PWM_ConfigChannel+0x168>
 800234e:	a201      	add	r2, pc, #4	; (adr r2, 8002354 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002354:	08002389 	.word	0x08002389
 8002358:	0800248d 	.word	0x0800248d
 800235c:	0800248d 	.word	0x0800248d
 8002360:	0800248d 	.word	0x0800248d
 8002364:	080023c9 	.word	0x080023c9
 8002368:	0800248d 	.word	0x0800248d
 800236c:	0800248d 	.word	0x0800248d
 8002370:	0800248d 	.word	0x0800248d
 8002374:	0800240b 	.word	0x0800240b
 8002378:	0800248d 	.word	0x0800248d
 800237c:	0800248d 	.word	0x0800248d
 8002380:	0800248d 	.word	0x0800248d
 8002384:	0800244b 	.word	0x0800244b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f9ba 	bl	8002708 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0208 	orr.w	r2, r2, #8
 80023a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0204 	bic.w	r2, r2, #4
 80023b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6999      	ldr	r1, [r3, #24]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	619a      	str	r2, [r3, #24]
      break;
 80023c6:	e062      	b.n	800248e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 f9d6 	bl	8002780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6999      	ldr	r1, [r3, #24]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	021a      	lsls	r2, r3, #8
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	619a      	str	r2, [r3, #24]
      break;
 8002408:	e041      	b.n	800248e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f9f3 	bl	80027fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0208 	orr.w	r2, r2, #8
 8002424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69da      	ldr	r2, [r3, #28]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0204 	bic.w	r2, r2, #4
 8002434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	69d9      	ldr	r1, [r3, #28]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	61da      	str	r2, [r3, #28]
      break;
 8002448:	e021      	b.n	800248e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fa10 	bl	8002876 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69d9      	ldr	r1, [r3, #28]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	021a      	lsls	r2, r3, #8
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	61da      	str	r2, [r3, #28]
      break;
 800248a:	e000      	b.n	800248e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800248c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_TIM_ConfigClockSource+0x18>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e0b3      	b.n	8002620 <HAL_TIM_ConfigClockSource+0x180>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f0:	d03e      	beq.n	8002570 <HAL_TIM_ConfigClockSource+0xd0>
 80024f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f6:	f200 8087 	bhi.w	8002608 <HAL_TIM_ConfigClockSource+0x168>
 80024fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fe:	f000 8085 	beq.w	800260c <HAL_TIM_ConfigClockSource+0x16c>
 8002502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002506:	d87f      	bhi.n	8002608 <HAL_TIM_ConfigClockSource+0x168>
 8002508:	2b70      	cmp	r3, #112	; 0x70
 800250a:	d01a      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0xa2>
 800250c:	2b70      	cmp	r3, #112	; 0x70
 800250e:	d87b      	bhi.n	8002608 <HAL_TIM_ConfigClockSource+0x168>
 8002510:	2b60      	cmp	r3, #96	; 0x60
 8002512:	d050      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0x116>
 8002514:	2b60      	cmp	r3, #96	; 0x60
 8002516:	d877      	bhi.n	8002608 <HAL_TIM_ConfigClockSource+0x168>
 8002518:	2b50      	cmp	r3, #80	; 0x50
 800251a:	d03c      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0xf6>
 800251c:	2b50      	cmp	r3, #80	; 0x50
 800251e:	d873      	bhi.n	8002608 <HAL_TIM_ConfigClockSource+0x168>
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	d058      	beq.n	80025d6 <HAL_TIM_ConfigClockSource+0x136>
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d86f      	bhi.n	8002608 <HAL_TIM_ConfigClockSource+0x168>
 8002528:	2b30      	cmp	r3, #48	; 0x30
 800252a:	d064      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x156>
 800252c:	2b30      	cmp	r3, #48	; 0x30
 800252e:	d86b      	bhi.n	8002608 <HAL_TIM_ConfigClockSource+0x168>
 8002530:	2b20      	cmp	r3, #32
 8002532:	d060      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x156>
 8002534:	2b20      	cmp	r3, #32
 8002536:	d867      	bhi.n	8002608 <HAL_TIM_ConfigClockSource+0x168>
 8002538:	2b00      	cmp	r3, #0
 800253a:	d05c      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x156>
 800253c:	2b10      	cmp	r3, #16
 800253e:	d05a      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002540:	e062      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6899      	ldr	r1, [r3, #8]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f000 fa45 	bl	80029e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002564:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	609a      	str	r2, [r3, #8]
      break;
 800256e:	e04e      	b.n	800260e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6899      	ldr	r1, [r3, #8]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f000 fa2e 	bl	80029e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002592:	609a      	str	r2, [r3, #8]
      break;
 8002594:	e03b      	b.n	800260e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6859      	ldr	r1, [r3, #4]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	461a      	mov	r2, r3
 80025a4:	f000 f9a5 	bl	80028f2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2150      	movs	r1, #80	; 0x50
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f9fc 	bl	80029ac <TIM_ITRx_SetConfig>
      break;
 80025b4:	e02b      	b.n	800260e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6859      	ldr	r1, [r3, #4]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	461a      	mov	r2, r3
 80025c4:	f000 f9c3 	bl	800294e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2160      	movs	r1, #96	; 0x60
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f9ec 	bl	80029ac <TIM_ITRx_SetConfig>
      break;
 80025d4:	e01b      	b.n	800260e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6859      	ldr	r1, [r3, #4]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	461a      	mov	r2, r3
 80025e4:	f000 f985 	bl	80028f2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2140      	movs	r1, #64	; 0x40
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f9dc 	bl	80029ac <TIM_ITRx_SetConfig>
      break;
 80025f4:	e00b      	b.n	800260e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4619      	mov	r1, r3
 8002600:	4610      	mov	r0, r2
 8002602:	f000 f9d3 	bl	80029ac <TIM_ITRx_SetConfig>
        break;
 8002606:	e002      	b.n	800260e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002608:	bf00      	nop
 800260a:	e000      	b.n	800260e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800260c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263e:	d00f      	beq.n	8002660 <TIM_Base_SetConfig+0x38>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a2b      	ldr	r2, [pc, #172]	; (80026f0 <TIM_Base_SetConfig+0xc8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00b      	beq.n	8002660 <TIM_Base_SetConfig+0x38>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a2a      	ldr	r2, [pc, #168]	; (80026f4 <TIM_Base_SetConfig+0xcc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d007      	beq.n	8002660 <TIM_Base_SetConfig+0x38>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a29      	ldr	r2, [pc, #164]	; (80026f8 <TIM_Base_SetConfig+0xd0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d003      	beq.n	8002660 <TIM_Base_SetConfig+0x38>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a28      	ldr	r2, [pc, #160]	; (80026fc <TIM_Base_SetConfig+0xd4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d108      	bne.n	8002672 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002678:	d017      	beq.n	80026aa <TIM_Base_SetConfig+0x82>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <TIM_Base_SetConfig+0xc8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <TIM_Base_SetConfig+0x82>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a1b      	ldr	r2, [pc, #108]	; (80026f4 <TIM_Base_SetConfig+0xcc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00f      	beq.n	80026aa <TIM_Base_SetConfig+0x82>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a1a      	ldr	r2, [pc, #104]	; (80026f8 <TIM_Base_SetConfig+0xd0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00b      	beq.n	80026aa <TIM_Base_SetConfig+0x82>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a19      	ldr	r2, [pc, #100]	; (80026fc <TIM_Base_SetConfig+0xd4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <TIM_Base_SetConfig+0x82>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a18      	ldr	r2, [pc, #96]	; (8002700 <TIM_Base_SetConfig+0xd8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d003      	beq.n	80026aa <TIM_Base_SetConfig+0x82>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a17      	ldr	r2, [pc, #92]	; (8002704 <TIM_Base_SetConfig+0xdc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d108      	bne.n	80026bc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	615a      	str	r2, [r3, #20]
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40000800 	.word	0x40000800
 80026f8:	40000c00 	.word	0x40000c00
 80026fc:	40010800 	.word	0x40010800
 8002700:	40010c00 	.word	0x40010c00
 8002704:	40011000 	.word	0x40011000

08002708 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	f023 0201 	bic.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0303 	bic.w	r3, r3, #3
 800273e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f023 0302 	bic.w	r3, r3, #2
 8002750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	621a      	str	r2, [r3, #32]
}
 8002776:	bf00      	nop
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	f023 0210 	bic.w	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f023 0320 	bic.w	r3, r3, #32
 80027ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0303 	bic.w	r3, r3, #3
 8002832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	621a      	str	r2, [r3, #32]
}
 800286c:	bf00      	nop
 800286e:	371c      	adds	r7, #28
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002876:	b480      	push	{r7}
 8002878:	b087      	sub	sp, #28
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	031b      	lsls	r3, r3, #12
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	621a      	str	r2, [r3, #32]
}
 80028e8:	bf00      	nop
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b087      	sub	sp, #28
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f023 0201 	bic.w	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800291c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f023 030a 	bic.w	r3, r3, #10
 800292e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	621a      	str	r2, [r3, #32]
}
 8002944:	bf00      	nop
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800294e:	b480      	push	{r7}
 8002950:	b087      	sub	sp, #28
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	f023 0210 	bic.w	r2, r3, #16
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	031b      	lsls	r3, r3, #12
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800298a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	621a      	str	r2, [r3, #32]
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f043 0307 	orr.w	r3, r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	609a      	str	r2, [r3, #8]
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	021a      	lsls	r2, r3, #8
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	609a      	str	r2, [r3, #8]
}
 8002a14:	bf00      	nop
 8002a16:	371c      	adds	r7, #28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b087      	sub	sp, #28
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	2201      	movs	r2, #1
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a1a      	ldr	r2, [r3, #32]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	401a      	ands	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a1a      	ldr	r2, [r3, #32]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	431a      	orrs	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	621a      	str	r2, [r3, #32]
}
 8002a5c:	bf00      	nop
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e046      	b.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d009      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d10c      	bne.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	40000400 	.word	0x40000400
 8002b1c:	40000800 	.word	0x40000800
 8002b20:	40010800 	.word	0x40010800

08002b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e03f      	b.n	8002bb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fd feca 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2224      	movs	r2, #36	; 0x24
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fcc7 	bl	80034fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b08a      	sub	sp, #40	; 0x28
 8002bc2:	af02      	add	r7, sp, #8
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d17c      	bne.n	8002cd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_UART_Transmit+0x2c>
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e075      	b.n	8002cda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_UART_Transmit+0x3e>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e06e      	b.n	8002cda <HAL_UART_Transmit+0x11c>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2221      	movs	r2, #33	; 0x21
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c12:	f7fe f96d 	bl	8000ef0 <HAL_GetTick>
 8002c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	88fa      	ldrh	r2, [r7, #6]
 8002c1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2c:	d108      	bne.n	8002c40 <HAL_UART_Transmit+0x82>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d104      	bne.n	8002c40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	e003      	b.n	8002c48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c50:	e02a      	b.n	8002ca8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2180      	movs	r1, #128	; 0x80
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fab3 	bl	80031c8 <UART_WaitOnFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e036      	b.n	8002cda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10b      	bne.n	8002c8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	3302      	adds	r3, #2
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	e007      	b.n	8002c9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	3301      	adds	r3, #1
 8002c98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1cf      	bne.n	8002c52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2140      	movs	r1, #64	; 0x40
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fa83 	bl	80031c8 <UART_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e006      	b.n	8002cda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e000      	b.n	8002cda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
  }
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3720      	adds	r7, #32
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b08a      	sub	sp, #40	; 0x28
 8002ce6:	af02      	add	r7, sp, #8
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	f040 808c 	bne.w	8002e1c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_UART_Receive+0x2e>
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e084      	b.n	8002e1e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_UART_Receive+0x40>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e07d      	b.n	8002e1e <HAL_UART_Receive+0x13c>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2222      	movs	r2, #34	; 0x22
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d3e:	f7fe f8d7 	bl	8000ef0 <HAL_GetTick>
 8002d42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	88fa      	ldrh	r2, [r7, #6]
 8002d48:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	88fa      	ldrh	r2, [r7, #6]
 8002d4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d58:	d108      	bne.n	8002d6c <HAL_UART_Receive+0x8a>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	e003      	b.n	8002d74 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002d7c:	e043      	b.n	8002e06 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2120      	movs	r1, #32
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fa1d 	bl	80031c8 <UART_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e042      	b.n	8002e1e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	3302      	adds	r3, #2
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	e01f      	b.n	8002df8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc0:	d007      	beq.n	8002dd2 <HAL_UART_Receive+0xf0>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <HAL_UART_Receive+0xfe>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	e008      	b.n	8002df2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3301      	adds	r3, #1
 8002df6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1b6      	bne.n	8002d7e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e000      	b.n	8002e1e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002e1c:	2302      	movs	r3, #2
  }
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	; 0x28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10d      	bne.n	8002e7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_UART_IRQHandler+0x52>
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fa99 	bl	80033aa <UART_Receive_IT>
      return;
 8002e78:	e17b      	b.n	8003172 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80b1 	beq.w	8002fe4 <HAL_UART_IRQHandler+0x1bc>
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <HAL_UART_IRQHandler+0x70>
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80a6 	beq.w	8002fe4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_UART_IRQHandler+0x90>
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f043 0201 	orr.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_UART_IRQHandler+0xb0>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f043 0202 	orr.w	r2, r3, #2
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_UART_IRQHandler+0xd0>
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	f043 0204 	orr.w	r2, r3, #4
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00f      	beq.n	8002f22 <HAL_UART_IRQHandler+0xfa>
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d104      	bne.n	8002f16 <HAL_UART_IRQHandler+0xee>
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0208 	orr.w	r2, r3, #8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 811e 	beq.w	8003168 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <HAL_UART_IRQHandler+0x11e>
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fa32 	bl	80033aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <HAL_UART_IRQHandler+0x146>
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d031      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f974 	bl	800325c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b40      	cmp	r3, #64	; 0x40
 8002f80:	d123      	bne.n	8002fca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f90:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d013      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	4a76      	ldr	r2, [pc, #472]	; (8003178 <HAL_UART_IRQHandler+0x350>)
 8002fa0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe f918 	bl	80011dc <HAL_DMA_Abort_IT>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d016      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc0:	e00e      	b.n	8002fe0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f8ec 	bl	80031a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc8:	e00a      	b.n	8002fe0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8e8 	bl	80031a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd0:	e006      	b.n	8002fe0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f8e4 	bl	80031a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002fde:	e0c3      	b.n	8003168 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe0:	bf00      	nop
    return;
 8002fe2:	e0c1      	b.n	8003168 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	f040 80a1 	bne.w	8003130 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 809b 	beq.w	8003130 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 8095 	beq.w	8003130 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	2b40      	cmp	r3, #64	; 0x40
 8003028:	d14e      	bne.n	80030c8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003034:	8a3b      	ldrh	r3, [r7, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8098 	beq.w	800316c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003040:	8a3a      	ldrh	r2, [r7, #16]
 8003042:	429a      	cmp	r2, r3
 8003044:	f080 8092 	bcs.w	800316c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8a3a      	ldrh	r2, [r7, #16]
 800304c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b20      	cmp	r3, #32
 8003056:	d02b      	beq.n	80030b0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003066:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0201 	bic.w	r2, r2, #1
 8003076:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003086:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0210 	bic.w	r2, r2, #16
 80030a4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe f859 	bl	8001162 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	b29b      	uxth	r3, r3
 80030be:	4619      	mov	r1, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f876 	bl	80031b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80030c6:	e051      	b.n	800316c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d047      	beq.n	8003170 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80030e0:	8a7b      	ldrh	r3, [r7, #18]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d044      	beq.n	8003170 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80030f4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0201 	bic.w	r2, r2, #1
 8003104:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0210 	bic.w	r2, r2, #16
 8003122:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003124:	8a7b      	ldrh	r3, [r7, #18]
 8003126:	4619      	mov	r1, r3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f842 	bl	80031b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800312e:	e01f      	b.n	8003170 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_UART_IRQHandler+0x324>
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f8c9 	bl	80032dc <UART_Transmit_IT>
    return;
 800314a:	e012      	b.n	8003172 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <HAL_UART_IRQHandler+0x34a>
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f90a 	bl	800337a <UART_EndTransmit_IT>
    return;
 8003166:	e004      	b.n	8003172 <HAL_UART_IRQHandler+0x34a>
    return;
 8003168:	bf00      	nop
 800316a:	e002      	b.n	8003172 <HAL_UART_IRQHandler+0x34a>
      return;
 800316c:	bf00      	nop
 800316e:	e000      	b.n	8003172 <HAL_UART_IRQHandler+0x34a>
      return;
 8003170:	bf00      	nop
  }
}
 8003172:	3728      	adds	r7, #40	; 0x28
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	080032b5 	.word	0x080032b5

0800317c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d8:	e02c      	b.n	8003234 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d028      	beq.n	8003234 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80031e8:	f7fd fe82 	bl	8000ef0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d21d      	bcs.n	8003234 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003206:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e00f      	b.n	8003254 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4013      	ands	r3, r2
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	429a      	cmp	r2, r3
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	429a      	cmp	r2, r3
 8003250:	d0c3      	beq.n	80031da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003272:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	2b01      	cmp	r3, #1
 800328a:	d107      	bne.n	800329c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0210 	bic.w	r2, r2, #16
 800329a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f7ff ff66 	bl	80031a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032d4:	bf00      	nop
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b21      	cmp	r3, #33	; 0x21
 80032ee:	d13e      	bne.n	800336e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f8:	d114      	bne.n	8003324 <UART_Transmit_IT+0x48>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d110      	bne.n	8003324 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003316:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	1c9a      	adds	r2, r3, #2
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	621a      	str	r2, [r3, #32]
 8003322:	e008      	b.n	8003336 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	1c59      	adds	r1, r3, #1
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6211      	str	r1, [r2, #32]
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29b      	uxth	r3, r3
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4619      	mov	r1, r3
 8003344:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003358:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003368:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e000      	b.n	8003370 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800336e:	2302      	movs	r3, #2
  }
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003390:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff feee 	bl	800317c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b086      	sub	sp, #24
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b22      	cmp	r3, #34	; 0x22
 80033bc:	f040 8099 	bne.w	80034f2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c8:	d117      	bne.n	80033fa <UART_Receive_IT+0x50>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d113      	bne.n	80033fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	1c9a      	adds	r2, r3, #2
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	629a      	str	r2, [r3, #40]	; 0x28
 80033f8:	e026      	b.n	8003448 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003400:	2300      	movs	r3, #0
 8003402:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340c:	d007      	beq.n	800341e <UART_Receive_IT+0x74>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10a      	bne.n	800342c <UART_Receive_IT+0x82>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	e008      	b.n	800343e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003438:	b2da      	uxtb	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29b      	uxth	r3, r3
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4619      	mov	r1, r3
 8003456:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003458:	2b00      	cmp	r3, #0
 800345a:	d148      	bne.n	80034ee <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0220 	bic.w	r2, r2, #32
 800346a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800347a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	2b01      	cmp	r3, #1
 800349a:	d123      	bne.n	80034e4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0210 	bic.w	r2, r2, #16
 80034b0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d10a      	bne.n	80034d6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034da:	4619      	mov	r1, r3
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff fe68 	bl	80031b2 <HAL_UARTEx_RxEventCallback>
 80034e2:	e002      	b.n	80034ea <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fe52 	bl	800318e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e002      	b.n	80034f4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e000      	b.n	80034f4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
  }
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	4313      	orrs	r3, r2
 8003530:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800353c:	f023 030c 	bic.w	r3, r3, #12
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	430b      	orrs	r3, r1
 8003548:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699a      	ldr	r2, [r3, #24]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a55      	ldr	r2, [pc, #340]	; (80036bc <UART_SetConfig+0x1c0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d103      	bne.n	8003572 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800356a:	f7fe fd49 	bl	8002000 <HAL_RCC_GetPCLK2Freq>
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	e002      	b.n	8003578 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003572:	f7fe fd31 	bl	8001fd8 <HAL_RCC_GetPCLK1Freq>
 8003576:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003580:	d14c      	bne.n	800361c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	009a      	lsls	r2, r3, #2
 800358c:	441a      	add	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	4a49      	ldr	r2, [pc, #292]	; (80036c0 <UART_SetConfig+0x1c4>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	0119      	lsls	r1, r3, #4
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	009a      	lsls	r2, r3, #2
 80035ac:	441a      	add	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035b8:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <UART_SetConfig+0x1c4>)
 80035ba:	fba3 0302 	umull	r0, r3, r3, r2
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	2064      	movs	r0, #100	; 0x64
 80035c2:	fb00 f303 	mul.w	r3, r0, r3
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	3332      	adds	r3, #50	; 0x32
 80035cc:	4a3c      	ldr	r2, [pc, #240]	; (80036c0 <UART_SetConfig+0x1c4>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035da:	4419      	add	r1, r3
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	009a      	lsls	r2, r3, #2
 80035e6:	441a      	add	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80035f2:	4b33      	ldr	r3, [pc, #204]	; (80036c0 <UART_SetConfig+0x1c4>)
 80035f4:	fba3 0302 	umull	r0, r3, r3, r2
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	2064      	movs	r0, #100	; 0x64
 80035fc:	fb00 f303 	mul.w	r3, r0, r3
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	3332      	adds	r3, #50	; 0x32
 8003606:	4a2e      	ldr	r2, [pc, #184]	; (80036c0 <UART_SetConfig+0x1c4>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	f003 0207 	and.w	r2, r3, #7
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	440a      	add	r2, r1
 8003618:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800361a:	e04a      	b.n	80036b2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	009a      	lsls	r2, r3, #2
 8003626:	441a      	add	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003632:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <UART_SetConfig+0x1c4>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	0119      	lsls	r1, r3, #4
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	009a      	lsls	r2, r3, #2
 8003646:	441a      	add	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003652:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <UART_SetConfig+0x1c4>)
 8003654:	fba3 0302 	umull	r0, r3, r3, r2
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	2064      	movs	r0, #100	; 0x64
 800365c:	fb00 f303 	mul.w	r3, r0, r3
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	3332      	adds	r3, #50	; 0x32
 8003666:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <UART_SetConfig+0x1c4>)
 8003668:	fba2 2303 	umull	r2, r3, r2, r3
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003672:	4419      	add	r1, r3
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	009a      	lsls	r2, r3, #2
 800367e:	441a      	add	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	fbb2 f2f3 	udiv	r2, r2, r3
 800368a:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <UART_SetConfig+0x1c4>)
 800368c:	fba3 0302 	umull	r0, r3, r3, r2
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	2064      	movs	r0, #100	; 0x64
 8003694:	fb00 f303 	mul.w	r3, r0, r3
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	3332      	adds	r3, #50	; 0x32
 800369e:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <UART_SetConfig+0x1c4>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	f003 020f 	and.w	r2, r3, #15
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	440a      	add	r2, r1
 80036b0:	609a      	str	r2, [r3, #8]
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40013800 	.word	0x40013800
 80036c0:	51eb851f 	.word	0x51eb851f

080036c4 <__errno>:
 80036c4:	4b01      	ldr	r3, [pc, #4]	; (80036cc <__errno+0x8>)
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000010 	.word	0x20000010

080036d0 <__libc_init_array>:
 80036d0:	b570      	push	{r4, r5, r6, lr}
 80036d2:	2600      	movs	r6, #0
 80036d4:	4d0c      	ldr	r5, [pc, #48]	; (8003708 <__libc_init_array+0x38>)
 80036d6:	4c0d      	ldr	r4, [pc, #52]	; (800370c <__libc_init_array+0x3c>)
 80036d8:	1b64      	subs	r4, r4, r5
 80036da:	10a4      	asrs	r4, r4, #2
 80036dc:	42a6      	cmp	r6, r4
 80036de:	d109      	bne.n	80036f4 <__libc_init_array+0x24>
 80036e0:	f000 ffb6 	bl	8004650 <_init>
 80036e4:	2600      	movs	r6, #0
 80036e6:	4d0a      	ldr	r5, [pc, #40]	; (8003710 <__libc_init_array+0x40>)
 80036e8:	4c0a      	ldr	r4, [pc, #40]	; (8003714 <__libc_init_array+0x44>)
 80036ea:	1b64      	subs	r4, r4, r5
 80036ec:	10a4      	asrs	r4, r4, #2
 80036ee:	42a6      	cmp	r6, r4
 80036f0:	d105      	bne.n	80036fe <__libc_init_array+0x2e>
 80036f2:	bd70      	pop	{r4, r5, r6, pc}
 80036f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f8:	4798      	blx	r3
 80036fa:	3601      	adds	r6, #1
 80036fc:	e7ee      	b.n	80036dc <__libc_init_array+0xc>
 80036fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003702:	4798      	blx	r3
 8003704:	3601      	adds	r6, #1
 8003706:	e7f2      	b.n	80036ee <__libc_init_array+0x1e>
 8003708:	08004738 	.word	0x08004738
 800370c:	08004738 	.word	0x08004738
 8003710:	08004738 	.word	0x08004738
 8003714:	0800473c 	.word	0x0800473c

08003718 <memset>:
 8003718:	4603      	mov	r3, r0
 800371a:	4402      	add	r2, r0
 800371c:	4293      	cmp	r3, r2
 800371e:	d100      	bne.n	8003722 <memset+0xa>
 8003720:	4770      	bx	lr
 8003722:	f803 1b01 	strb.w	r1, [r3], #1
 8003726:	e7f9      	b.n	800371c <memset+0x4>

08003728 <iprintf>:
 8003728:	b40f      	push	{r0, r1, r2, r3}
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <iprintf+0x2c>)
 800372c:	b513      	push	{r0, r1, r4, lr}
 800372e:	681c      	ldr	r4, [r3, #0]
 8003730:	b124      	cbz	r4, 800373c <iprintf+0x14>
 8003732:	69a3      	ldr	r3, [r4, #24]
 8003734:	b913      	cbnz	r3, 800373c <iprintf+0x14>
 8003736:	4620      	mov	r0, r4
 8003738:	f000 f866 	bl	8003808 <__sinit>
 800373c:	ab05      	add	r3, sp, #20
 800373e:	4620      	mov	r0, r4
 8003740:	9a04      	ldr	r2, [sp, #16]
 8003742:	68a1      	ldr	r1, [r4, #8]
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	f000 f9bb 	bl	8003ac0 <_vfiprintf_r>
 800374a:	b002      	add	sp, #8
 800374c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003750:	b004      	add	sp, #16
 8003752:	4770      	bx	lr
 8003754:	20000010 	.word	0x20000010

08003758 <std>:
 8003758:	2300      	movs	r3, #0
 800375a:	b510      	push	{r4, lr}
 800375c:	4604      	mov	r4, r0
 800375e:	e9c0 3300 	strd	r3, r3, [r0]
 8003762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003766:	6083      	str	r3, [r0, #8]
 8003768:	8181      	strh	r1, [r0, #12]
 800376a:	6643      	str	r3, [r0, #100]	; 0x64
 800376c:	81c2      	strh	r2, [r0, #14]
 800376e:	6183      	str	r3, [r0, #24]
 8003770:	4619      	mov	r1, r3
 8003772:	2208      	movs	r2, #8
 8003774:	305c      	adds	r0, #92	; 0x5c
 8003776:	f7ff ffcf 	bl	8003718 <memset>
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <std+0x38>)
 800377c:	6224      	str	r4, [r4, #32]
 800377e:	6263      	str	r3, [r4, #36]	; 0x24
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <std+0x3c>)
 8003782:	62a3      	str	r3, [r4, #40]	; 0x28
 8003784:	4b04      	ldr	r3, [pc, #16]	; (8003798 <std+0x40>)
 8003786:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003788:	4b04      	ldr	r3, [pc, #16]	; (800379c <std+0x44>)
 800378a:	6323      	str	r3, [r4, #48]	; 0x30
 800378c:	bd10      	pop	{r4, pc}
 800378e:	bf00      	nop
 8003790:	0800406d 	.word	0x0800406d
 8003794:	0800408f 	.word	0x0800408f
 8003798:	080040c7 	.word	0x080040c7
 800379c:	080040eb 	.word	0x080040eb

080037a0 <_cleanup_r>:
 80037a0:	4901      	ldr	r1, [pc, #4]	; (80037a8 <_cleanup_r+0x8>)
 80037a2:	f000 b8af 	b.w	8003904 <_fwalk_reent>
 80037a6:	bf00      	nop
 80037a8:	080043bd 	.word	0x080043bd

080037ac <__sfmoreglue>:
 80037ac:	2268      	movs	r2, #104	; 0x68
 80037ae:	b570      	push	{r4, r5, r6, lr}
 80037b0:	1e4d      	subs	r5, r1, #1
 80037b2:	4355      	muls	r5, r2
 80037b4:	460e      	mov	r6, r1
 80037b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80037ba:	f000 f8e5 	bl	8003988 <_malloc_r>
 80037be:	4604      	mov	r4, r0
 80037c0:	b140      	cbz	r0, 80037d4 <__sfmoreglue+0x28>
 80037c2:	2100      	movs	r1, #0
 80037c4:	e9c0 1600 	strd	r1, r6, [r0]
 80037c8:	300c      	adds	r0, #12
 80037ca:	60a0      	str	r0, [r4, #8]
 80037cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037d0:	f7ff ffa2 	bl	8003718 <memset>
 80037d4:	4620      	mov	r0, r4
 80037d6:	bd70      	pop	{r4, r5, r6, pc}

080037d8 <__sfp_lock_acquire>:
 80037d8:	4801      	ldr	r0, [pc, #4]	; (80037e0 <__sfp_lock_acquire+0x8>)
 80037da:	f000 b8b3 	b.w	8003944 <__retarget_lock_acquire_recursive>
 80037de:	bf00      	nop
 80037e0:	200001b1 	.word	0x200001b1

080037e4 <__sfp_lock_release>:
 80037e4:	4801      	ldr	r0, [pc, #4]	; (80037ec <__sfp_lock_release+0x8>)
 80037e6:	f000 b8ae 	b.w	8003946 <__retarget_lock_release_recursive>
 80037ea:	bf00      	nop
 80037ec:	200001b1 	.word	0x200001b1

080037f0 <__sinit_lock_acquire>:
 80037f0:	4801      	ldr	r0, [pc, #4]	; (80037f8 <__sinit_lock_acquire+0x8>)
 80037f2:	f000 b8a7 	b.w	8003944 <__retarget_lock_acquire_recursive>
 80037f6:	bf00      	nop
 80037f8:	200001b2 	.word	0x200001b2

080037fc <__sinit_lock_release>:
 80037fc:	4801      	ldr	r0, [pc, #4]	; (8003804 <__sinit_lock_release+0x8>)
 80037fe:	f000 b8a2 	b.w	8003946 <__retarget_lock_release_recursive>
 8003802:	bf00      	nop
 8003804:	200001b2 	.word	0x200001b2

08003808 <__sinit>:
 8003808:	b510      	push	{r4, lr}
 800380a:	4604      	mov	r4, r0
 800380c:	f7ff fff0 	bl	80037f0 <__sinit_lock_acquire>
 8003810:	69a3      	ldr	r3, [r4, #24]
 8003812:	b11b      	cbz	r3, 800381c <__sinit+0x14>
 8003814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003818:	f7ff bff0 	b.w	80037fc <__sinit_lock_release>
 800381c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003820:	6523      	str	r3, [r4, #80]	; 0x50
 8003822:	4b13      	ldr	r3, [pc, #76]	; (8003870 <__sinit+0x68>)
 8003824:	4a13      	ldr	r2, [pc, #76]	; (8003874 <__sinit+0x6c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	62a2      	str	r2, [r4, #40]	; 0x28
 800382a:	42a3      	cmp	r3, r4
 800382c:	bf08      	it	eq
 800382e:	2301      	moveq	r3, #1
 8003830:	4620      	mov	r0, r4
 8003832:	bf08      	it	eq
 8003834:	61a3      	streq	r3, [r4, #24]
 8003836:	f000 f81f 	bl	8003878 <__sfp>
 800383a:	6060      	str	r0, [r4, #4]
 800383c:	4620      	mov	r0, r4
 800383e:	f000 f81b 	bl	8003878 <__sfp>
 8003842:	60a0      	str	r0, [r4, #8]
 8003844:	4620      	mov	r0, r4
 8003846:	f000 f817 	bl	8003878 <__sfp>
 800384a:	2200      	movs	r2, #0
 800384c:	2104      	movs	r1, #4
 800384e:	60e0      	str	r0, [r4, #12]
 8003850:	6860      	ldr	r0, [r4, #4]
 8003852:	f7ff ff81 	bl	8003758 <std>
 8003856:	2201      	movs	r2, #1
 8003858:	2109      	movs	r1, #9
 800385a:	68a0      	ldr	r0, [r4, #8]
 800385c:	f7ff ff7c 	bl	8003758 <std>
 8003860:	2202      	movs	r2, #2
 8003862:	2112      	movs	r1, #18
 8003864:	68e0      	ldr	r0, [r4, #12]
 8003866:	f7ff ff77 	bl	8003758 <std>
 800386a:	2301      	movs	r3, #1
 800386c:	61a3      	str	r3, [r4, #24]
 800386e:	e7d1      	b.n	8003814 <__sinit+0xc>
 8003870:	08004698 	.word	0x08004698
 8003874:	080037a1 	.word	0x080037a1

08003878 <__sfp>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	4607      	mov	r7, r0
 800387c:	f7ff ffac 	bl	80037d8 <__sfp_lock_acquire>
 8003880:	4b1e      	ldr	r3, [pc, #120]	; (80038fc <__sfp+0x84>)
 8003882:	681e      	ldr	r6, [r3, #0]
 8003884:	69b3      	ldr	r3, [r6, #24]
 8003886:	b913      	cbnz	r3, 800388e <__sfp+0x16>
 8003888:	4630      	mov	r0, r6
 800388a:	f7ff ffbd 	bl	8003808 <__sinit>
 800388e:	3648      	adds	r6, #72	; 0x48
 8003890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003894:	3b01      	subs	r3, #1
 8003896:	d503      	bpl.n	80038a0 <__sfp+0x28>
 8003898:	6833      	ldr	r3, [r6, #0]
 800389a:	b30b      	cbz	r3, 80038e0 <__sfp+0x68>
 800389c:	6836      	ldr	r6, [r6, #0]
 800389e:	e7f7      	b.n	8003890 <__sfp+0x18>
 80038a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038a4:	b9d5      	cbnz	r5, 80038dc <__sfp+0x64>
 80038a6:	4b16      	ldr	r3, [pc, #88]	; (8003900 <__sfp+0x88>)
 80038a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80038ac:	60e3      	str	r3, [r4, #12]
 80038ae:	6665      	str	r5, [r4, #100]	; 0x64
 80038b0:	f000 f847 	bl	8003942 <__retarget_lock_init_recursive>
 80038b4:	f7ff ff96 	bl	80037e4 <__sfp_lock_release>
 80038b8:	2208      	movs	r2, #8
 80038ba:	4629      	mov	r1, r5
 80038bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80038c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80038c4:	6025      	str	r5, [r4, #0]
 80038c6:	61a5      	str	r5, [r4, #24]
 80038c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038cc:	f7ff ff24 	bl	8003718 <memset>
 80038d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038d8:	4620      	mov	r0, r4
 80038da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038dc:	3468      	adds	r4, #104	; 0x68
 80038de:	e7d9      	b.n	8003894 <__sfp+0x1c>
 80038e0:	2104      	movs	r1, #4
 80038e2:	4638      	mov	r0, r7
 80038e4:	f7ff ff62 	bl	80037ac <__sfmoreglue>
 80038e8:	4604      	mov	r4, r0
 80038ea:	6030      	str	r0, [r6, #0]
 80038ec:	2800      	cmp	r0, #0
 80038ee:	d1d5      	bne.n	800389c <__sfp+0x24>
 80038f0:	f7ff ff78 	bl	80037e4 <__sfp_lock_release>
 80038f4:	230c      	movs	r3, #12
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	e7ee      	b.n	80038d8 <__sfp+0x60>
 80038fa:	bf00      	nop
 80038fc:	08004698 	.word	0x08004698
 8003900:	ffff0001 	.word	0xffff0001

08003904 <_fwalk_reent>:
 8003904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003908:	4606      	mov	r6, r0
 800390a:	4688      	mov	r8, r1
 800390c:	2700      	movs	r7, #0
 800390e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003912:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003916:	f1b9 0901 	subs.w	r9, r9, #1
 800391a:	d505      	bpl.n	8003928 <_fwalk_reent+0x24>
 800391c:	6824      	ldr	r4, [r4, #0]
 800391e:	2c00      	cmp	r4, #0
 8003920:	d1f7      	bne.n	8003912 <_fwalk_reent+0xe>
 8003922:	4638      	mov	r0, r7
 8003924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003928:	89ab      	ldrh	r3, [r5, #12]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d907      	bls.n	800393e <_fwalk_reent+0x3a>
 800392e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003932:	3301      	adds	r3, #1
 8003934:	d003      	beq.n	800393e <_fwalk_reent+0x3a>
 8003936:	4629      	mov	r1, r5
 8003938:	4630      	mov	r0, r6
 800393a:	47c0      	blx	r8
 800393c:	4307      	orrs	r7, r0
 800393e:	3568      	adds	r5, #104	; 0x68
 8003940:	e7e9      	b.n	8003916 <_fwalk_reent+0x12>

08003942 <__retarget_lock_init_recursive>:
 8003942:	4770      	bx	lr

08003944 <__retarget_lock_acquire_recursive>:
 8003944:	4770      	bx	lr

08003946 <__retarget_lock_release_recursive>:
 8003946:	4770      	bx	lr

08003948 <sbrk_aligned>:
 8003948:	b570      	push	{r4, r5, r6, lr}
 800394a:	4e0e      	ldr	r6, [pc, #56]	; (8003984 <sbrk_aligned+0x3c>)
 800394c:	460c      	mov	r4, r1
 800394e:	6831      	ldr	r1, [r6, #0]
 8003950:	4605      	mov	r5, r0
 8003952:	b911      	cbnz	r1, 800395a <sbrk_aligned+0x12>
 8003954:	f000 fb7a 	bl	800404c <_sbrk_r>
 8003958:	6030      	str	r0, [r6, #0]
 800395a:	4621      	mov	r1, r4
 800395c:	4628      	mov	r0, r5
 800395e:	f000 fb75 	bl	800404c <_sbrk_r>
 8003962:	1c43      	adds	r3, r0, #1
 8003964:	d00a      	beq.n	800397c <sbrk_aligned+0x34>
 8003966:	1cc4      	adds	r4, r0, #3
 8003968:	f024 0403 	bic.w	r4, r4, #3
 800396c:	42a0      	cmp	r0, r4
 800396e:	d007      	beq.n	8003980 <sbrk_aligned+0x38>
 8003970:	1a21      	subs	r1, r4, r0
 8003972:	4628      	mov	r0, r5
 8003974:	f000 fb6a 	bl	800404c <_sbrk_r>
 8003978:	3001      	adds	r0, #1
 800397a:	d101      	bne.n	8003980 <sbrk_aligned+0x38>
 800397c:	f04f 34ff 	mov.w	r4, #4294967295
 8003980:	4620      	mov	r0, r4
 8003982:	bd70      	pop	{r4, r5, r6, pc}
 8003984:	200001b8 	.word	0x200001b8

08003988 <_malloc_r>:
 8003988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800398c:	1ccd      	adds	r5, r1, #3
 800398e:	f025 0503 	bic.w	r5, r5, #3
 8003992:	3508      	adds	r5, #8
 8003994:	2d0c      	cmp	r5, #12
 8003996:	bf38      	it	cc
 8003998:	250c      	movcc	r5, #12
 800399a:	2d00      	cmp	r5, #0
 800399c:	4607      	mov	r7, r0
 800399e:	db01      	blt.n	80039a4 <_malloc_r+0x1c>
 80039a0:	42a9      	cmp	r1, r5
 80039a2:	d905      	bls.n	80039b0 <_malloc_r+0x28>
 80039a4:	230c      	movs	r3, #12
 80039a6:	2600      	movs	r6, #0
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	4630      	mov	r0, r6
 80039ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039b0:	4e2e      	ldr	r6, [pc, #184]	; (8003a6c <_malloc_r+0xe4>)
 80039b2:	f000 fdc5 	bl	8004540 <__malloc_lock>
 80039b6:	6833      	ldr	r3, [r6, #0]
 80039b8:	461c      	mov	r4, r3
 80039ba:	bb34      	cbnz	r4, 8003a0a <_malloc_r+0x82>
 80039bc:	4629      	mov	r1, r5
 80039be:	4638      	mov	r0, r7
 80039c0:	f7ff ffc2 	bl	8003948 <sbrk_aligned>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	4604      	mov	r4, r0
 80039c8:	d14d      	bne.n	8003a66 <_malloc_r+0xde>
 80039ca:	6834      	ldr	r4, [r6, #0]
 80039cc:	4626      	mov	r6, r4
 80039ce:	2e00      	cmp	r6, #0
 80039d0:	d140      	bne.n	8003a54 <_malloc_r+0xcc>
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	4631      	mov	r1, r6
 80039d6:	4638      	mov	r0, r7
 80039d8:	eb04 0803 	add.w	r8, r4, r3
 80039dc:	f000 fb36 	bl	800404c <_sbrk_r>
 80039e0:	4580      	cmp	r8, r0
 80039e2:	d13a      	bne.n	8003a5a <_malloc_r+0xd2>
 80039e4:	6821      	ldr	r1, [r4, #0]
 80039e6:	3503      	adds	r5, #3
 80039e8:	1a6d      	subs	r5, r5, r1
 80039ea:	f025 0503 	bic.w	r5, r5, #3
 80039ee:	3508      	adds	r5, #8
 80039f0:	2d0c      	cmp	r5, #12
 80039f2:	bf38      	it	cc
 80039f4:	250c      	movcc	r5, #12
 80039f6:	4638      	mov	r0, r7
 80039f8:	4629      	mov	r1, r5
 80039fa:	f7ff ffa5 	bl	8003948 <sbrk_aligned>
 80039fe:	3001      	adds	r0, #1
 8003a00:	d02b      	beq.n	8003a5a <_malloc_r+0xd2>
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	442b      	add	r3, r5
 8003a06:	6023      	str	r3, [r4, #0]
 8003a08:	e00e      	b.n	8003a28 <_malloc_r+0xa0>
 8003a0a:	6822      	ldr	r2, [r4, #0]
 8003a0c:	1b52      	subs	r2, r2, r5
 8003a0e:	d41e      	bmi.n	8003a4e <_malloc_r+0xc6>
 8003a10:	2a0b      	cmp	r2, #11
 8003a12:	d916      	bls.n	8003a42 <_malloc_r+0xba>
 8003a14:	1961      	adds	r1, r4, r5
 8003a16:	42a3      	cmp	r3, r4
 8003a18:	6025      	str	r5, [r4, #0]
 8003a1a:	bf18      	it	ne
 8003a1c:	6059      	strne	r1, [r3, #4]
 8003a1e:	6863      	ldr	r3, [r4, #4]
 8003a20:	bf08      	it	eq
 8003a22:	6031      	streq	r1, [r6, #0]
 8003a24:	5162      	str	r2, [r4, r5]
 8003a26:	604b      	str	r3, [r1, #4]
 8003a28:	4638      	mov	r0, r7
 8003a2a:	f104 060b 	add.w	r6, r4, #11
 8003a2e:	f000 fd8d 	bl	800454c <__malloc_unlock>
 8003a32:	f026 0607 	bic.w	r6, r6, #7
 8003a36:	1d23      	adds	r3, r4, #4
 8003a38:	1af2      	subs	r2, r6, r3
 8003a3a:	d0b6      	beq.n	80039aa <_malloc_r+0x22>
 8003a3c:	1b9b      	subs	r3, r3, r6
 8003a3e:	50a3      	str	r3, [r4, r2]
 8003a40:	e7b3      	b.n	80039aa <_malloc_r+0x22>
 8003a42:	6862      	ldr	r2, [r4, #4]
 8003a44:	42a3      	cmp	r3, r4
 8003a46:	bf0c      	ite	eq
 8003a48:	6032      	streq	r2, [r6, #0]
 8003a4a:	605a      	strne	r2, [r3, #4]
 8003a4c:	e7ec      	b.n	8003a28 <_malloc_r+0xa0>
 8003a4e:	4623      	mov	r3, r4
 8003a50:	6864      	ldr	r4, [r4, #4]
 8003a52:	e7b2      	b.n	80039ba <_malloc_r+0x32>
 8003a54:	4634      	mov	r4, r6
 8003a56:	6876      	ldr	r6, [r6, #4]
 8003a58:	e7b9      	b.n	80039ce <_malloc_r+0x46>
 8003a5a:	230c      	movs	r3, #12
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	f000 fd74 	bl	800454c <__malloc_unlock>
 8003a64:	e7a1      	b.n	80039aa <_malloc_r+0x22>
 8003a66:	6025      	str	r5, [r4, #0]
 8003a68:	e7de      	b.n	8003a28 <_malloc_r+0xa0>
 8003a6a:	bf00      	nop
 8003a6c:	200001b4 	.word	0x200001b4

08003a70 <__sfputc_r>:
 8003a70:	6893      	ldr	r3, [r2, #8]
 8003a72:	b410      	push	{r4}
 8003a74:	3b01      	subs	r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	6093      	str	r3, [r2, #8]
 8003a7a:	da07      	bge.n	8003a8c <__sfputc_r+0x1c>
 8003a7c:	6994      	ldr	r4, [r2, #24]
 8003a7e:	42a3      	cmp	r3, r4
 8003a80:	db01      	blt.n	8003a86 <__sfputc_r+0x16>
 8003a82:	290a      	cmp	r1, #10
 8003a84:	d102      	bne.n	8003a8c <__sfputc_r+0x1c>
 8003a86:	bc10      	pop	{r4}
 8003a88:	f000 bb34 	b.w	80040f4 <__swbuf_r>
 8003a8c:	6813      	ldr	r3, [r2, #0]
 8003a8e:	1c58      	adds	r0, r3, #1
 8003a90:	6010      	str	r0, [r2, #0]
 8003a92:	7019      	strb	r1, [r3, #0]
 8003a94:	4608      	mov	r0, r1
 8003a96:	bc10      	pop	{r4}
 8003a98:	4770      	bx	lr

08003a9a <__sfputs_r>:
 8003a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9c:	4606      	mov	r6, r0
 8003a9e:	460f      	mov	r7, r1
 8003aa0:	4614      	mov	r4, r2
 8003aa2:	18d5      	adds	r5, r2, r3
 8003aa4:	42ac      	cmp	r4, r5
 8003aa6:	d101      	bne.n	8003aac <__sfputs_r+0x12>
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	e007      	b.n	8003abc <__sfputs_r+0x22>
 8003aac:	463a      	mov	r2, r7
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ab4:	f7ff ffdc 	bl	8003a70 <__sfputc_r>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d1f3      	bne.n	8003aa4 <__sfputs_r+0xa>
 8003abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ac0 <_vfiprintf_r>:
 8003ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac4:	460d      	mov	r5, r1
 8003ac6:	4614      	mov	r4, r2
 8003ac8:	4698      	mov	r8, r3
 8003aca:	4606      	mov	r6, r0
 8003acc:	b09d      	sub	sp, #116	; 0x74
 8003ace:	b118      	cbz	r0, 8003ad8 <_vfiprintf_r+0x18>
 8003ad0:	6983      	ldr	r3, [r0, #24]
 8003ad2:	b90b      	cbnz	r3, 8003ad8 <_vfiprintf_r+0x18>
 8003ad4:	f7ff fe98 	bl	8003808 <__sinit>
 8003ad8:	4b89      	ldr	r3, [pc, #548]	; (8003d00 <_vfiprintf_r+0x240>)
 8003ada:	429d      	cmp	r5, r3
 8003adc:	d11b      	bne.n	8003b16 <_vfiprintf_r+0x56>
 8003ade:	6875      	ldr	r5, [r6, #4]
 8003ae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ae2:	07d9      	lsls	r1, r3, #31
 8003ae4:	d405      	bmi.n	8003af2 <_vfiprintf_r+0x32>
 8003ae6:	89ab      	ldrh	r3, [r5, #12]
 8003ae8:	059a      	lsls	r2, r3, #22
 8003aea:	d402      	bmi.n	8003af2 <_vfiprintf_r+0x32>
 8003aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003aee:	f7ff ff29 	bl	8003944 <__retarget_lock_acquire_recursive>
 8003af2:	89ab      	ldrh	r3, [r5, #12]
 8003af4:	071b      	lsls	r3, r3, #28
 8003af6:	d501      	bpl.n	8003afc <_vfiprintf_r+0x3c>
 8003af8:	692b      	ldr	r3, [r5, #16]
 8003afa:	b9eb      	cbnz	r3, 8003b38 <_vfiprintf_r+0x78>
 8003afc:	4629      	mov	r1, r5
 8003afe:	4630      	mov	r0, r6
 8003b00:	f000 fb5c 	bl	80041bc <__swsetup_r>
 8003b04:	b1c0      	cbz	r0, 8003b38 <_vfiprintf_r+0x78>
 8003b06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b08:	07dc      	lsls	r4, r3, #31
 8003b0a:	d50e      	bpl.n	8003b2a <_vfiprintf_r+0x6a>
 8003b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b10:	b01d      	add	sp, #116	; 0x74
 8003b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b16:	4b7b      	ldr	r3, [pc, #492]	; (8003d04 <_vfiprintf_r+0x244>)
 8003b18:	429d      	cmp	r5, r3
 8003b1a:	d101      	bne.n	8003b20 <_vfiprintf_r+0x60>
 8003b1c:	68b5      	ldr	r5, [r6, #8]
 8003b1e:	e7df      	b.n	8003ae0 <_vfiprintf_r+0x20>
 8003b20:	4b79      	ldr	r3, [pc, #484]	; (8003d08 <_vfiprintf_r+0x248>)
 8003b22:	429d      	cmp	r5, r3
 8003b24:	bf08      	it	eq
 8003b26:	68f5      	ldreq	r5, [r6, #12]
 8003b28:	e7da      	b.n	8003ae0 <_vfiprintf_r+0x20>
 8003b2a:	89ab      	ldrh	r3, [r5, #12]
 8003b2c:	0598      	lsls	r0, r3, #22
 8003b2e:	d4ed      	bmi.n	8003b0c <_vfiprintf_r+0x4c>
 8003b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b32:	f7ff ff08 	bl	8003946 <__retarget_lock_release_recursive>
 8003b36:	e7e9      	b.n	8003b0c <_vfiprintf_r+0x4c>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b3c:	2320      	movs	r3, #32
 8003b3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b42:	2330      	movs	r3, #48	; 0x30
 8003b44:	f04f 0901 	mov.w	r9, #1
 8003b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b4c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003d0c <_vfiprintf_r+0x24c>
 8003b50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b54:	4623      	mov	r3, r4
 8003b56:	469a      	mov	sl, r3
 8003b58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b5c:	b10a      	cbz	r2, 8003b62 <_vfiprintf_r+0xa2>
 8003b5e:	2a25      	cmp	r2, #37	; 0x25
 8003b60:	d1f9      	bne.n	8003b56 <_vfiprintf_r+0x96>
 8003b62:	ebba 0b04 	subs.w	fp, sl, r4
 8003b66:	d00b      	beq.n	8003b80 <_vfiprintf_r+0xc0>
 8003b68:	465b      	mov	r3, fp
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	4630      	mov	r0, r6
 8003b70:	f7ff ff93 	bl	8003a9a <__sfputs_r>
 8003b74:	3001      	adds	r0, #1
 8003b76:	f000 80aa 	beq.w	8003cce <_vfiprintf_r+0x20e>
 8003b7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b7c:	445a      	add	r2, fp
 8003b7e:	9209      	str	r2, [sp, #36]	; 0x24
 8003b80:	f89a 3000 	ldrb.w	r3, [sl]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80a2 	beq.w	8003cce <_vfiprintf_r+0x20e>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b94:	f10a 0a01 	add.w	sl, sl, #1
 8003b98:	9304      	str	r3, [sp, #16]
 8003b9a:	9307      	str	r3, [sp, #28]
 8003b9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ba0:	931a      	str	r3, [sp, #104]	; 0x68
 8003ba2:	4654      	mov	r4, sl
 8003ba4:	2205      	movs	r2, #5
 8003ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003baa:	4858      	ldr	r0, [pc, #352]	; (8003d0c <_vfiprintf_r+0x24c>)
 8003bac:	f000 fcba 	bl	8004524 <memchr>
 8003bb0:	9a04      	ldr	r2, [sp, #16]
 8003bb2:	b9d8      	cbnz	r0, 8003bec <_vfiprintf_r+0x12c>
 8003bb4:	06d1      	lsls	r1, r2, #27
 8003bb6:	bf44      	itt	mi
 8003bb8:	2320      	movmi	r3, #32
 8003bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bbe:	0713      	lsls	r3, r2, #28
 8003bc0:	bf44      	itt	mi
 8003bc2:	232b      	movmi	r3, #43	; 0x2b
 8003bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8003bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8003bce:	d015      	beq.n	8003bfc <_vfiprintf_r+0x13c>
 8003bd0:	4654      	mov	r4, sl
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f04f 0c0a 	mov.w	ip, #10
 8003bd8:	9a07      	ldr	r2, [sp, #28]
 8003bda:	4621      	mov	r1, r4
 8003bdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003be0:	3b30      	subs	r3, #48	; 0x30
 8003be2:	2b09      	cmp	r3, #9
 8003be4:	d94e      	bls.n	8003c84 <_vfiprintf_r+0x1c4>
 8003be6:	b1b0      	cbz	r0, 8003c16 <_vfiprintf_r+0x156>
 8003be8:	9207      	str	r2, [sp, #28]
 8003bea:	e014      	b.n	8003c16 <_vfiprintf_r+0x156>
 8003bec:	eba0 0308 	sub.w	r3, r0, r8
 8003bf0:	fa09 f303 	lsl.w	r3, r9, r3
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	46a2      	mov	sl, r4
 8003bf8:	9304      	str	r3, [sp, #16]
 8003bfa:	e7d2      	b.n	8003ba2 <_vfiprintf_r+0xe2>
 8003bfc:	9b03      	ldr	r3, [sp, #12]
 8003bfe:	1d19      	adds	r1, r3, #4
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	9103      	str	r1, [sp, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bfbb      	ittet	lt
 8003c08:	425b      	neglt	r3, r3
 8003c0a:	f042 0202 	orrlt.w	r2, r2, #2
 8003c0e:	9307      	strge	r3, [sp, #28]
 8003c10:	9307      	strlt	r3, [sp, #28]
 8003c12:	bfb8      	it	lt
 8003c14:	9204      	strlt	r2, [sp, #16]
 8003c16:	7823      	ldrb	r3, [r4, #0]
 8003c18:	2b2e      	cmp	r3, #46	; 0x2e
 8003c1a:	d10c      	bne.n	8003c36 <_vfiprintf_r+0x176>
 8003c1c:	7863      	ldrb	r3, [r4, #1]
 8003c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c20:	d135      	bne.n	8003c8e <_vfiprintf_r+0x1ce>
 8003c22:	9b03      	ldr	r3, [sp, #12]
 8003c24:	3402      	adds	r4, #2
 8003c26:	1d1a      	adds	r2, r3, #4
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	9203      	str	r2, [sp, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bfb8      	it	lt
 8003c30:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c34:	9305      	str	r3, [sp, #20]
 8003c36:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003d10 <_vfiprintf_r+0x250>
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	4650      	mov	r0, sl
 8003c3e:	7821      	ldrb	r1, [r4, #0]
 8003c40:	f000 fc70 	bl	8004524 <memchr>
 8003c44:	b140      	cbz	r0, 8003c58 <_vfiprintf_r+0x198>
 8003c46:	2340      	movs	r3, #64	; 0x40
 8003c48:	eba0 000a 	sub.w	r0, r0, sl
 8003c4c:	fa03 f000 	lsl.w	r0, r3, r0
 8003c50:	9b04      	ldr	r3, [sp, #16]
 8003c52:	3401      	adds	r4, #1
 8003c54:	4303      	orrs	r3, r0
 8003c56:	9304      	str	r3, [sp, #16]
 8003c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c5c:	2206      	movs	r2, #6
 8003c5e:	482d      	ldr	r0, [pc, #180]	; (8003d14 <_vfiprintf_r+0x254>)
 8003c60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c64:	f000 fc5e 	bl	8004524 <memchr>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	d03f      	beq.n	8003cec <_vfiprintf_r+0x22c>
 8003c6c:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <_vfiprintf_r+0x258>)
 8003c6e:	bb1b      	cbnz	r3, 8003cb8 <_vfiprintf_r+0x1f8>
 8003c70:	9b03      	ldr	r3, [sp, #12]
 8003c72:	3307      	adds	r3, #7
 8003c74:	f023 0307 	bic.w	r3, r3, #7
 8003c78:	3308      	adds	r3, #8
 8003c7a:	9303      	str	r3, [sp, #12]
 8003c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c7e:	443b      	add	r3, r7
 8003c80:	9309      	str	r3, [sp, #36]	; 0x24
 8003c82:	e767      	b.n	8003b54 <_vfiprintf_r+0x94>
 8003c84:	460c      	mov	r4, r1
 8003c86:	2001      	movs	r0, #1
 8003c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c8c:	e7a5      	b.n	8003bda <_vfiprintf_r+0x11a>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f04f 0c0a 	mov.w	ip, #10
 8003c94:	4619      	mov	r1, r3
 8003c96:	3401      	adds	r4, #1
 8003c98:	9305      	str	r3, [sp, #20]
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ca0:	3a30      	subs	r2, #48	; 0x30
 8003ca2:	2a09      	cmp	r2, #9
 8003ca4:	d903      	bls.n	8003cae <_vfiprintf_r+0x1ee>
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0c5      	beq.n	8003c36 <_vfiprintf_r+0x176>
 8003caa:	9105      	str	r1, [sp, #20]
 8003cac:	e7c3      	b.n	8003c36 <_vfiprintf_r+0x176>
 8003cae:	4604      	mov	r4, r0
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cb6:	e7f0      	b.n	8003c9a <_vfiprintf_r+0x1da>
 8003cb8:	ab03      	add	r3, sp, #12
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	462a      	mov	r2, r5
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <_vfiprintf_r+0x25c>)
 8003cc2:	a904      	add	r1, sp, #16
 8003cc4:	f3af 8000 	nop.w
 8003cc8:	4607      	mov	r7, r0
 8003cca:	1c78      	adds	r0, r7, #1
 8003ccc:	d1d6      	bne.n	8003c7c <_vfiprintf_r+0x1bc>
 8003cce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cd0:	07d9      	lsls	r1, r3, #31
 8003cd2:	d405      	bmi.n	8003ce0 <_vfiprintf_r+0x220>
 8003cd4:	89ab      	ldrh	r3, [r5, #12]
 8003cd6:	059a      	lsls	r2, r3, #22
 8003cd8:	d402      	bmi.n	8003ce0 <_vfiprintf_r+0x220>
 8003cda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cdc:	f7ff fe33 	bl	8003946 <__retarget_lock_release_recursive>
 8003ce0:	89ab      	ldrh	r3, [r5, #12]
 8003ce2:	065b      	lsls	r3, r3, #25
 8003ce4:	f53f af12 	bmi.w	8003b0c <_vfiprintf_r+0x4c>
 8003ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cea:	e711      	b.n	8003b10 <_vfiprintf_r+0x50>
 8003cec:	ab03      	add	r3, sp, #12
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	462a      	mov	r2, r5
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <_vfiprintf_r+0x25c>)
 8003cf6:	a904      	add	r1, sp, #16
 8003cf8:	f000 f882 	bl	8003e00 <_printf_i>
 8003cfc:	e7e4      	b.n	8003cc8 <_vfiprintf_r+0x208>
 8003cfe:	bf00      	nop
 8003d00:	080046bc 	.word	0x080046bc
 8003d04:	080046dc 	.word	0x080046dc
 8003d08:	0800469c 	.word	0x0800469c
 8003d0c:	080046fc 	.word	0x080046fc
 8003d10:	08004702 	.word	0x08004702
 8003d14:	08004706 	.word	0x08004706
 8003d18:	00000000 	.word	0x00000000
 8003d1c:	08003a9b 	.word	0x08003a9b

08003d20 <_printf_common>:
 8003d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d24:	4616      	mov	r6, r2
 8003d26:	4699      	mov	r9, r3
 8003d28:	688a      	ldr	r2, [r1, #8]
 8003d2a:	690b      	ldr	r3, [r1, #16]
 8003d2c:	4607      	mov	r7, r0
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	bfb8      	it	lt
 8003d32:	4613      	movlt	r3, r2
 8003d34:	6033      	str	r3, [r6, #0]
 8003d36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d40:	b10a      	cbz	r2, 8003d46 <_printf_common+0x26>
 8003d42:	3301      	adds	r3, #1
 8003d44:	6033      	str	r3, [r6, #0]
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	0699      	lsls	r1, r3, #26
 8003d4a:	bf42      	ittt	mi
 8003d4c:	6833      	ldrmi	r3, [r6, #0]
 8003d4e:	3302      	addmi	r3, #2
 8003d50:	6033      	strmi	r3, [r6, #0]
 8003d52:	6825      	ldr	r5, [r4, #0]
 8003d54:	f015 0506 	ands.w	r5, r5, #6
 8003d58:	d106      	bne.n	8003d68 <_printf_common+0x48>
 8003d5a:	f104 0a19 	add.w	sl, r4, #25
 8003d5e:	68e3      	ldr	r3, [r4, #12]
 8003d60:	6832      	ldr	r2, [r6, #0]
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	42ab      	cmp	r3, r5
 8003d66:	dc28      	bgt.n	8003dba <_printf_common+0x9a>
 8003d68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d6c:	1e13      	subs	r3, r2, #0
 8003d6e:	6822      	ldr	r2, [r4, #0]
 8003d70:	bf18      	it	ne
 8003d72:	2301      	movne	r3, #1
 8003d74:	0692      	lsls	r2, r2, #26
 8003d76:	d42d      	bmi.n	8003dd4 <_printf_common+0xb4>
 8003d78:	4649      	mov	r1, r9
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d80:	47c0      	blx	r8
 8003d82:	3001      	adds	r0, #1
 8003d84:	d020      	beq.n	8003dc8 <_printf_common+0xa8>
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	68e5      	ldr	r5, [r4, #12]
 8003d8a:	f003 0306 	and.w	r3, r3, #6
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	bf18      	it	ne
 8003d92:	2500      	movne	r5, #0
 8003d94:	6832      	ldr	r2, [r6, #0]
 8003d96:	f04f 0600 	mov.w	r6, #0
 8003d9a:	68a3      	ldr	r3, [r4, #8]
 8003d9c:	bf08      	it	eq
 8003d9e:	1aad      	subeq	r5, r5, r2
 8003da0:	6922      	ldr	r2, [r4, #16]
 8003da2:	bf08      	it	eq
 8003da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003da8:	4293      	cmp	r3, r2
 8003daa:	bfc4      	itt	gt
 8003dac:	1a9b      	subgt	r3, r3, r2
 8003dae:	18ed      	addgt	r5, r5, r3
 8003db0:	341a      	adds	r4, #26
 8003db2:	42b5      	cmp	r5, r6
 8003db4:	d11a      	bne.n	8003dec <_printf_common+0xcc>
 8003db6:	2000      	movs	r0, #0
 8003db8:	e008      	b.n	8003dcc <_printf_common+0xac>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	4652      	mov	r2, sl
 8003dbe:	4649      	mov	r1, r9
 8003dc0:	4638      	mov	r0, r7
 8003dc2:	47c0      	blx	r8
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	d103      	bne.n	8003dd0 <_printf_common+0xb0>
 8003dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd0:	3501      	adds	r5, #1
 8003dd2:	e7c4      	b.n	8003d5e <_printf_common+0x3e>
 8003dd4:	2030      	movs	r0, #48	; 0x30
 8003dd6:	18e1      	adds	r1, r4, r3
 8003dd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003de2:	4422      	add	r2, r4
 8003de4:	3302      	adds	r3, #2
 8003de6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dea:	e7c5      	b.n	8003d78 <_printf_common+0x58>
 8003dec:	2301      	movs	r3, #1
 8003dee:	4622      	mov	r2, r4
 8003df0:	4649      	mov	r1, r9
 8003df2:	4638      	mov	r0, r7
 8003df4:	47c0      	blx	r8
 8003df6:	3001      	adds	r0, #1
 8003df8:	d0e6      	beq.n	8003dc8 <_printf_common+0xa8>
 8003dfa:	3601      	adds	r6, #1
 8003dfc:	e7d9      	b.n	8003db2 <_printf_common+0x92>
	...

08003e00 <_printf_i>:
 8003e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e04:	7e0f      	ldrb	r7, [r1, #24]
 8003e06:	4691      	mov	r9, r2
 8003e08:	2f78      	cmp	r7, #120	; 0x78
 8003e0a:	4680      	mov	r8, r0
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	469a      	mov	sl, r3
 8003e10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e16:	d807      	bhi.n	8003e28 <_printf_i+0x28>
 8003e18:	2f62      	cmp	r7, #98	; 0x62
 8003e1a:	d80a      	bhi.n	8003e32 <_printf_i+0x32>
 8003e1c:	2f00      	cmp	r7, #0
 8003e1e:	f000 80d9 	beq.w	8003fd4 <_printf_i+0x1d4>
 8003e22:	2f58      	cmp	r7, #88	; 0x58
 8003e24:	f000 80a4 	beq.w	8003f70 <_printf_i+0x170>
 8003e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e30:	e03a      	b.n	8003ea8 <_printf_i+0xa8>
 8003e32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e36:	2b15      	cmp	r3, #21
 8003e38:	d8f6      	bhi.n	8003e28 <_printf_i+0x28>
 8003e3a:	a101      	add	r1, pc, #4	; (adr r1, 8003e40 <_printf_i+0x40>)
 8003e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e40:	08003e99 	.word	0x08003e99
 8003e44:	08003ead 	.word	0x08003ead
 8003e48:	08003e29 	.word	0x08003e29
 8003e4c:	08003e29 	.word	0x08003e29
 8003e50:	08003e29 	.word	0x08003e29
 8003e54:	08003e29 	.word	0x08003e29
 8003e58:	08003ead 	.word	0x08003ead
 8003e5c:	08003e29 	.word	0x08003e29
 8003e60:	08003e29 	.word	0x08003e29
 8003e64:	08003e29 	.word	0x08003e29
 8003e68:	08003e29 	.word	0x08003e29
 8003e6c:	08003fbb 	.word	0x08003fbb
 8003e70:	08003edd 	.word	0x08003edd
 8003e74:	08003f9d 	.word	0x08003f9d
 8003e78:	08003e29 	.word	0x08003e29
 8003e7c:	08003e29 	.word	0x08003e29
 8003e80:	08003fdd 	.word	0x08003fdd
 8003e84:	08003e29 	.word	0x08003e29
 8003e88:	08003edd 	.word	0x08003edd
 8003e8c:	08003e29 	.word	0x08003e29
 8003e90:	08003e29 	.word	0x08003e29
 8003e94:	08003fa5 	.word	0x08003fa5
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	1d1a      	adds	r2, r3, #4
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	602a      	str	r2, [r5, #0]
 8003ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0a4      	b.n	8003ff6 <_printf_i+0x1f6>
 8003eac:	6820      	ldr	r0, [r4, #0]
 8003eae:	6829      	ldr	r1, [r5, #0]
 8003eb0:	0606      	lsls	r6, r0, #24
 8003eb2:	f101 0304 	add.w	r3, r1, #4
 8003eb6:	d50a      	bpl.n	8003ece <_printf_i+0xce>
 8003eb8:	680e      	ldr	r6, [r1, #0]
 8003eba:	602b      	str	r3, [r5, #0]
 8003ebc:	2e00      	cmp	r6, #0
 8003ebe:	da03      	bge.n	8003ec8 <_printf_i+0xc8>
 8003ec0:	232d      	movs	r3, #45	; 0x2d
 8003ec2:	4276      	negs	r6, r6
 8003ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ec8:	230a      	movs	r3, #10
 8003eca:	485e      	ldr	r0, [pc, #376]	; (8004044 <_printf_i+0x244>)
 8003ecc:	e019      	b.n	8003f02 <_printf_i+0x102>
 8003ece:	680e      	ldr	r6, [r1, #0]
 8003ed0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ed4:	602b      	str	r3, [r5, #0]
 8003ed6:	bf18      	it	ne
 8003ed8:	b236      	sxthne	r6, r6
 8003eda:	e7ef      	b.n	8003ebc <_printf_i+0xbc>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	6820      	ldr	r0, [r4, #0]
 8003ee0:	1d19      	adds	r1, r3, #4
 8003ee2:	6029      	str	r1, [r5, #0]
 8003ee4:	0601      	lsls	r1, r0, #24
 8003ee6:	d501      	bpl.n	8003eec <_printf_i+0xec>
 8003ee8:	681e      	ldr	r6, [r3, #0]
 8003eea:	e002      	b.n	8003ef2 <_printf_i+0xf2>
 8003eec:	0646      	lsls	r6, r0, #25
 8003eee:	d5fb      	bpl.n	8003ee8 <_printf_i+0xe8>
 8003ef0:	881e      	ldrh	r6, [r3, #0]
 8003ef2:	2f6f      	cmp	r7, #111	; 0x6f
 8003ef4:	bf0c      	ite	eq
 8003ef6:	2308      	moveq	r3, #8
 8003ef8:	230a      	movne	r3, #10
 8003efa:	4852      	ldr	r0, [pc, #328]	; (8004044 <_printf_i+0x244>)
 8003efc:	2100      	movs	r1, #0
 8003efe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f02:	6865      	ldr	r5, [r4, #4]
 8003f04:	2d00      	cmp	r5, #0
 8003f06:	bfa8      	it	ge
 8003f08:	6821      	ldrge	r1, [r4, #0]
 8003f0a:	60a5      	str	r5, [r4, #8]
 8003f0c:	bfa4      	itt	ge
 8003f0e:	f021 0104 	bicge.w	r1, r1, #4
 8003f12:	6021      	strge	r1, [r4, #0]
 8003f14:	b90e      	cbnz	r6, 8003f1a <_printf_i+0x11a>
 8003f16:	2d00      	cmp	r5, #0
 8003f18:	d04d      	beq.n	8003fb6 <_printf_i+0x1b6>
 8003f1a:	4615      	mov	r5, r2
 8003f1c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f20:	fb03 6711 	mls	r7, r3, r1, r6
 8003f24:	5dc7      	ldrb	r7, [r0, r7]
 8003f26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f2a:	4637      	mov	r7, r6
 8003f2c:	42bb      	cmp	r3, r7
 8003f2e:	460e      	mov	r6, r1
 8003f30:	d9f4      	bls.n	8003f1c <_printf_i+0x11c>
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d10b      	bne.n	8003f4e <_printf_i+0x14e>
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	07de      	lsls	r6, r3, #31
 8003f3a:	d508      	bpl.n	8003f4e <_printf_i+0x14e>
 8003f3c:	6923      	ldr	r3, [r4, #16]
 8003f3e:	6861      	ldr	r1, [r4, #4]
 8003f40:	4299      	cmp	r1, r3
 8003f42:	bfde      	ittt	le
 8003f44:	2330      	movle	r3, #48	; 0x30
 8003f46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f4e:	1b52      	subs	r2, r2, r5
 8003f50:	6122      	str	r2, [r4, #16]
 8003f52:	464b      	mov	r3, r9
 8003f54:	4621      	mov	r1, r4
 8003f56:	4640      	mov	r0, r8
 8003f58:	f8cd a000 	str.w	sl, [sp]
 8003f5c:	aa03      	add	r2, sp, #12
 8003f5e:	f7ff fedf 	bl	8003d20 <_printf_common>
 8003f62:	3001      	adds	r0, #1
 8003f64:	d14c      	bne.n	8004000 <_printf_i+0x200>
 8003f66:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6a:	b004      	add	sp, #16
 8003f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f70:	4834      	ldr	r0, [pc, #208]	; (8004044 <_printf_i+0x244>)
 8003f72:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f76:	6829      	ldr	r1, [r5, #0]
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f7e:	6029      	str	r1, [r5, #0]
 8003f80:	061d      	lsls	r5, r3, #24
 8003f82:	d514      	bpl.n	8003fae <_printf_i+0x1ae>
 8003f84:	07df      	lsls	r7, r3, #31
 8003f86:	bf44      	itt	mi
 8003f88:	f043 0320 	orrmi.w	r3, r3, #32
 8003f8c:	6023      	strmi	r3, [r4, #0]
 8003f8e:	b91e      	cbnz	r6, 8003f98 <_printf_i+0x198>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	f023 0320 	bic.w	r3, r3, #32
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	2310      	movs	r3, #16
 8003f9a:	e7af      	b.n	8003efc <_printf_i+0xfc>
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	f043 0320 	orr.w	r3, r3, #32
 8003fa2:	6023      	str	r3, [r4, #0]
 8003fa4:	2378      	movs	r3, #120	; 0x78
 8003fa6:	4828      	ldr	r0, [pc, #160]	; (8004048 <_printf_i+0x248>)
 8003fa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fac:	e7e3      	b.n	8003f76 <_printf_i+0x176>
 8003fae:	0659      	lsls	r1, r3, #25
 8003fb0:	bf48      	it	mi
 8003fb2:	b2b6      	uxthmi	r6, r6
 8003fb4:	e7e6      	b.n	8003f84 <_printf_i+0x184>
 8003fb6:	4615      	mov	r5, r2
 8003fb8:	e7bb      	b.n	8003f32 <_printf_i+0x132>
 8003fba:	682b      	ldr	r3, [r5, #0]
 8003fbc:	6826      	ldr	r6, [r4, #0]
 8003fbe:	1d18      	adds	r0, r3, #4
 8003fc0:	6961      	ldr	r1, [r4, #20]
 8003fc2:	6028      	str	r0, [r5, #0]
 8003fc4:	0635      	lsls	r5, r6, #24
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	d501      	bpl.n	8003fce <_printf_i+0x1ce>
 8003fca:	6019      	str	r1, [r3, #0]
 8003fcc:	e002      	b.n	8003fd4 <_printf_i+0x1d4>
 8003fce:	0670      	lsls	r0, r6, #25
 8003fd0:	d5fb      	bpl.n	8003fca <_printf_i+0x1ca>
 8003fd2:	8019      	strh	r1, [r3, #0]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	4615      	mov	r5, r2
 8003fd8:	6123      	str	r3, [r4, #16]
 8003fda:	e7ba      	b.n	8003f52 <_printf_i+0x152>
 8003fdc:	682b      	ldr	r3, [r5, #0]
 8003fde:	2100      	movs	r1, #0
 8003fe0:	1d1a      	adds	r2, r3, #4
 8003fe2:	602a      	str	r2, [r5, #0]
 8003fe4:	681d      	ldr	r5, [r3, #0]
 8003fe6:	6862      	ldr	r2, [r4, #4]
 8003fe8:	4628      	mov	r0, r5
 8003fea:	f000 fa9b 	bl	8004524 <memchr>
 8003fee:	b108      	cbz	r0, 8003ff4 <_printf_i+0x1f4>
 8003ff0:	1b40      	subs	r0, r0, r5
 8003ff2:	6060      	str	r0, [r4, #4]
 8003ff4:	6863      	ldr	r3, [r4, #4]
 8003ff6:	6123      	str	r3, [r4, #16]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ffe:	e7a8      	b.n	8003f52 <_printf_i+0x152>
 8004000:	462a      	mov	r2, r5
 8004002:	4649      	mov	r1, r9
 8004004:	4640      	mov	r0, r8
 8004006:	6923      	ldr	r3, [r4, #16]
 8004008:	47d0      	blx	sl
 800400a:	3001      	adds	r0, #1
 800400c:	d0ab      	beq.n	8003f66 <_printf_i+0x166>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	079b      	lsls	r3, r3, #30
 8004012:	d413      	bmi.n	800403c <_printf_i+0x23c>
 8004014:	68e0      	ldr	r0, [r4, #12]
 8004016:	9b03      	ldr	r3, [sp, #12]
 8004018:	4298      	cmp	r0, r3
 800401a:	bfb8      	it	lt
 800401c:	4618      	movlt	r0, r3
 800401e:	e7a4      	b.n	8003f6a <_printf_i+0x16a>
 8004020:	2301      	movs	r3, #1
 8004022:	4632      	mov	r2, r6
 8004024:	4649      	mov	r1, r9
 8004026:	4640      	mov	r0, r8
 8004028:	47d0      	blx	sl
 800402a:	3001      	adds	r0, #1
 800402c:	d09b      	beq.n	8003f66 <_printf_i+0x166>
 800402e:	3501      	adds	r5, #1
 8004030:	68e3      	ldr	r3, [r4, #12]
 8004032:	9903      	ldr	r1, [sp, #12]
 8004034:	1a5b      	subs	r3, r3, r1
 8004036:	42ab      	cmp	r3, r5
 8004038:	dcf2      	bgt.n	8004020 <_printf_i+0x220>
 800403a:	e7eb      	b.n	8004014 <_printf_i+0x214>
 800403c:	2500      	movs	r5, #0
 800403e:	f104 0619 	add.w	r6, r4, #25
 8004042:	e7f5      	b.n	8004030 <_printf_i+0x230>
 8004044:	0800470d 	.word	0x0800470d
 8004048:	0800471e 	.word	0x0800471e

0800404c <_sbrk_r>:
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	2300      	movs	r3, #0
 8004050:	4d05      	ldr	r5, [pc, #20]	; (8004068 <_sbrk_r+0x1c>)
 8004052:	4604      	mov	r4, r0
 8004054:	4608      	mov	r0, r1
 8004056:	602b      	str	r3, [r5, #0]
 8004058:	f7fc fd98 	bl	8000b8c <_sbrk>
 800405c:	1c43      	adds	r3, r0, #1
 800405e:	d102      	bne.n	8004066 <_sbrk_r+0x1a>
 8004060:	682b      	ldr	r3, [r5, #0]
 8004062:	b103      	cbz	r3, 8004066 <_sbrk_r+0x1a>
 8004064:	6023      	str	r3, [r4, #0]
 8004066:	bd38      	pop	{r3, r4, r5, pc}
 8004068:	200001bc 	.word	0x200001bc

0800406c <__sread>:
 800406c:	b510      	push	{r4, lr}
 800406e:	460c      	mov	r4, r1
 8004070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004074:	f000 fab8 	bl	80045e8 <_read_r>
 8004078:	2800      	cmp	r0, #0
 800407a:	bfab      	itete	ge
 800407c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800407e:	89a3      	ldrhlt	r3, [r4, #12]
 8004080:	181b      	addge	r3, r3, r0
 8004082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004086:	bfac      	ite	ge
 8004088:	6563      	strge	r3, [r4, #84]	; 0x54
 800408a:	81a3      	strhlt	r3, [r4, #12]
 800408c:	bd10      	pop	{r4, pc}

0800408e <__swrite>:
 800408e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004092:	461f      	mov	r7, r3
 8004094:	898b      	ldrh	r3, [r1, #12]
 8004096:	4605      	mov	r5, r0
 8004098:	05db      	lsls	r3, r3, #23
 800409a:	460c      	mov	r4, r1
 800409c:	4616      	mov	r6, r2
 800409e:	d505      	bpl.n	80040ac <__swrite+0x1e>
 80040a0:	2302      	movs	r3, #2
 80040a2:	2200      	movs	r2, #0
 80040a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a8:	f000 f9c4 	bl	8004434 <_lseek_r>
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	4632      	mov	r2, r6
 80040b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040b4:	81a3      	strh	r3, [r4, #12]
 80040b6:	4628      	mov	r0, r5
 80040b8:	463b      	mov	r3, r7
 80040ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040c2:	f000 b869 	b.w	8004198 <_write_r>

080040c6 <__sseek>:
 80040c6:	b510      	push	{r4, lr}
 80040c8:	460c      	mov	r4, r1
 80040ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ce:	f000 f9b1 	bl	8004434 <_lseek_r>
 80040d2:	1c43      	adds	r3, r0, #1
 80040d4:	89a3      	ldrh	r3, [r4, #12]
 80040d6:	bf15      	itete	ne
 80040d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80040da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040e2:	81a3      	strheq	r3, [r4, #12]
 80040e4:	bf18      	it	ne
 80040e6:	81a3      	strhne	r3, [r4, #12]
 80040e8:	bd10      	pop	{r4, pc}

080040ea <__sclose>:
 80040ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ee:	f000 b8d3 	b.w	8004298 <_close_r>
	...

080040f4 <__swbuf_r>:
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	460e      	mov	r6, r1
 80040f8:	4614      	mov	r4, r2
 80040fa:	4605      	mov	r5, r0
 80040fc:	b118      	cbz	r0, 8004106 <__swbuf_r+0x12>
 80040fe:	6983      	ldr	r3, [r0, #24]
 8004100:	b90b      	cbnz	r3, 8004106 <__swbuf_r+0x12>
 8004102:	f7ff fb81 	bl	8003808 <__sinit>
 8004106:	4b21      	ldr	r3, [pc, #132]	; (800418c <__swbuf_r+0x98>)
 8004108:	429c      	cmp	r4, r3
 800410a:	d12b      	bne.n	8004164 <__swbuf_r+0x70>
 800410c:	686c      	ldr	r4, [r5, #4]
 800410e:	69a3      	ldr	r3, [r4, #24]
 8004110:	60a3      	str	r3, [r4, #8]
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	071a      	lsls	r2, r3, #28
 8004116:	d52f      	bpl.n	8004178 <__swbuf_r+0x84>
 8004118:	6923      	ldr	r3, [r4, #16]
 800411a:	b36b      	cbz	r3, 8004178 <__swbuf_r+0x84>
 800411c:	6923      	ldr	r3, [r4, #16]
 800411e:	6820      	ldr	r0, [r4, #0]
 8004120:	b2f6      	uxtb	r6, r6
 8004122:	1ac0      	subs	r0, r0, r3
 8004124:	6963      	ldr	r3, [r4, #20]
 8004126:	4637      	mov	r7, r6
 8004128:	4283      	cmp	r3, r0
 800412a:	dc04      	bgt.n	8004136 <__swbuf_r+0x42>
 800412c:	4621      	mov	r1, r4
 800412e:	4628      	mov	r0, r5
 8004130:	f000 f944 	bl	80043bc <_fflush_r>
 8004134:	bb30      	cbnz	r0, 8004184 <__swbuf_r+0x90>
 8004136:	68a3      	ldr	r3, [r4, #8]
 8004138:	3001      	adds	r0, #1
 800413a:	3b01      	subs	r3, #1
 800413c:	60a3      	str	r3, [r4, #8]
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	6022      	str	r2, [r4, #0]
 8004144:	701e      	strb	r6, [r3, #0]
 8004146:	6963      	ldr	r3, [r4, #20]
 8004148:	4283      	cmp	r3, r0
 800414a:	d004      	beq.n	8004156 <__swbuf_r+0x62>
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	07db      	lsls	r3, r3, #31
 8004150:	d506      	bpl.n	8004160 <__swbuf_r+0x6c>
 8004152:	2e0a      	cmp	r6, #10
 8004154:	d104      	bne.n	8004160 <__swbuf_r+0x6c>
 8004156:	4621      	mov	r1, r4
 8004158:	4628      	mov	r0, r5
 800415a:	f000 f92f 	bl	80043bc <_fflush_r>
 800415e:	b988      	cbnz	r0, 8004184 <__swbuf_r+0x90>
 8004160:	4638      	mov	r0, r7
 8004162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <__swbuf_r+0x9c>)
 8004166:	429c      	cmp	r4, r3
 8004168:	d101      	bne.n	800416e <__swbuf_r+0x7a>
 800416a:	68ac      	ldr	r4, [r5, #8]
 800416c:	e7cf      	b.n	800410e <__swbuf_r+0x1a>
 800416e:	4b09      	ldr	r3, [pc, #36]	; (8004194 <__swbuf_r+0xa0>)
 8004170:	429c      	cmp	r4, r3
 8004172:	bf08      	it	eq
 8004174:	68ec      	ldreq	r4, [r5, #12]
 8004176:	e7ca      	b.n	800410e <__swbuf_r+0x1a>
 8004178:	4621      	mov	r1, r4
 800417a:	4628      	mov	r0, r5
 800417c:	f000 f81e 	bl	80041bc <__swsetup_r>
 8004180:	2800      	cmp	r0, #0
 8004182:	d0cb      	beq.n	800411c <__swbuf_r+0x28>
 8004184:	f04f 37ff 	mov.w	r7, #4294967295
 8004188:	e7ea      	b.n	8004160 <__swbuf_r+0x6c>
 800418a:	bf00      	nop
 800418c:	080046bc 	.word	0x080046bc
 8004190:	080046dc 	.word	0x080046dc
 8004194:	0800469c 	.word	0x0800469c

08004198 <_write_r>:
 8004198:	b538      	push	{r3, r4, r5, lr}
 800419a:	4604      	mov	r4, r0
 800419c:	4608      	mov	r0, r1
 800419e:	4611      	mov	r1, r2
 80041a0:	2200      	movs	r2, #0
 80041a2:	4d05      	ldr	r5, [pc, #20]	; (80041b8 <_write_r+0x20>)
 80041a4:	602a      	str	r2, [r5, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	f7fc f992 	bl	80004d0 <_write>
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	d102      	bne.n	80041b6 <_write_r+0x1e>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	b103      	cbz	r3, 80041b6 <_write_r+0x1e>
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
 80041b8:	200001bc 	.word	0x200001bc

080041bc <__swsetup_r>:
 80041bc:	4b32      	ldr	r3, [pc, #200]	; (8004288 <__swsetup_r+0xcc>)
 80041be:	b570      	push	{r4, r5, r6, lr}
 80041c0:	681d      	ldr	r5, [r3, #0]
 80041c2:	4606      	mov	r6, r0
 80041c4:	460c      	mov	r4, r1
 80041c6:	b125      	cbz	r5, 80041d2 <__swsetup_r+0x16>
 80041c8:	69ab      	ldr	r3, [r5, #24]
 80041ca:	b913      	cbnz	r3, 80041d2 <__swsetup_r+0x16>
 80041cc:	4628      	mov	r0, r5
 80041ce:	f7ff fb1b 	bl	8003808 <__sinit>
 80041d2:	4b2e      	ldr	r3, [pc, #184]	; (800428c <__swsetup_r+0xd0>)
 80041d4:	429c      	cmp	r4, r3
 80041d6:	d10f      	bne.n	80041f8 <__swsetup_r+0x3c>
 80041d8:	686c      	ldr	r4, [r5, #4]
 80041da:	89a3      	ldrh	r3, [r4, #12]
 80041dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041e0:	0719      	lsls	r1, r3, #28
 80041e2:	d42c      	bmi.n	800423e <__swsetup_r+0x82>
 80041e4:	06dd      	lsls	r5, r3, #27
 80041e6:	d411      	bmi.n	800420c <__swsetup_r+0x50>
 80041e8:	2309      	movs	r3, #9
 80041ea:	6033      	str	r3, [r6, #0]
 80041ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	81a3      	strh	r3, [r4, #12]
 80041f6:	e03e      	b.n	8004276 <__swsetup_r+0xba>
 80041f8:	4b25      	ldr	r3, [pc, #148]	; (8004290 <__swsetup_r+0xd4>)
 80041fa:	429c      	cmp	r4, r3
 80041fc:	d101      	bne.n	8004202 <__swsetup_r+0x46>
 80041fe:	68ac      	ldr	r4, [r5, #8]
 8004200:	e7eb      	b.n	80041da <__swsetup_r+0x1e>
 8004202:	4b24      	ldr	r3, [pc, #144]	; (8004294 <__swsetup_r+0xd8>)
 8004204:	429c      	cmp	r4, r3
 8004206:	bf08      	it	eq
 8004208:	68ec      	ldreq	r4, [r5, #12]
 800420a:	e7e6      	b.n	80041da <__swsetup_r+0x1e>
 800420c:	0758      	lsls	r0, r3, #29
 800420e:	d512      	bpl.n	8004236 <__swsetup_r+0x7a>
 8004210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004212:	b141      	cbz	r1, 8004226 <__swsetup_r+0x6a>
 8004214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004218:	4299      	cmp	r1, r3
 800421a:	d002      	beq.n	8004222 <__swsetup_r+0x66>
 800421c:	4630      	mov	r0, r6
 800421e:	f000 f99b 	bl	8004558 <_free_r>
 8004222:	2300      	movs	r3, #0
 8004224:	6363      	str	r3, [r4, #52]	; 0x34
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800422c:	81a3      	strh	r3, [r4, #12]
 800422e:	2300      	movs	r3, #0
 8004230:	6063      	str	r3, [r4, #4]
 8004232:	6923      	ldr	r3, [r4, #16]
 8004234:	6023      	str	r3, [r4, #0]
 8004236:	89a3      	ldrh	r3, [r4, #12]
 8004238:	f043 0308 	orr.w	r3, r3, #8
 800423c:	81a3      	strh	r3, [r4, #12]
 800423e:	6923      	ldr	r3, [r4, #16]
 8004240:	b94b      	cbnz	r3, 8004256 <__swsetup_r+0x9a>
 8004242:	89a3      	ldrh	r3, [r4, #12]
 8004244:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424c:	d003      	beq.n	8004256 <__swsetup_r+0x9a>
 800424e:	4621      	mov	r1, r4
 8004250:	4630      	mov	r0, r6
 8004252:	f000 f927 	bl	80044a4 <__smakebuf_r>
 8004256:	89a0      	ldrh	r0, [r4, #12]
 8004258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800425c:	f010 0301 	ands.w	r3, r0, #1
 8004260:	d00a      	beq.n	8004278 <__swsetup_r+0xbc>
 8004262:	2300      	movs	r3, #0
 8004264:	60a3      	str	r3, [r4, #8]
 8004266:	6963      	ldr	r3, [r4, #20]
 8004268:	425b      	negs	r3, r3
 800426a:	61a3      	str	r3, [r4, #24]
 800426c:	6923      	ldr	r3, [r4, #16]
 800426e:	b943      	cbnz	r3, 8004282 <__swsetup_r+0xc6>
 8004270:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004274:	d1ba      	bne.n	80041ec <__swsetup_r+0x30>
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	0781      	lsls	r1, r0, #30
 800427a:	bf58      	it	pl
 800427c:	6963      	ldrpl	r3, [r4, #20]
 800427e:	60a3      	str	r3, [r4, #8]
 8004280:	e7f4      	b.n	800426c <__swsetup_r+0xb0>
 8004282:	2000      	movs	r0, #0
 8004284:	e7f7      	b.n	8004276 <__swsetup_r+0xba>
 8004286:	bf00      	nop
 8004288:	20000010 	.word	0x20000010
 800428c:	080046bc 	.word	0x080046bc
 8004290:	080046dc 	.word	0x080046dc
 8004294:	0800469c 	.word	0x0800469c

08004298 <_close_r>:
 8004298:	b538      	push	{r3, r4, r5, lr}
 800429a:	2300      	movs	r3, #0
 800429c:	4d05      	ldr	r5, [pc, #20]	; (80042b4 <_close_r+0x1c>)
 800429e:	4604      	mov	r4, r0
 80042a0:	4608      	mov	r0, r1
 80042a2:	602b      	str	r3, [r5, #0]
 80042a4:	f7fc fc41 	bl	8000b2a <_close>
 80042a8:	1c43      	adds	r3, r0, #1
 80042aa:	d102      	bne.n	80042b2 <_close_r+0x1a>
 80042ac:	682b      	ldr	r3, [r5, #0]
 80042ae:	b103      	cbz	r3, 80042b2 <_close_r+0x1a>
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	bd38      	pop	{r3, r4, r5, pc}
 80042b4:	200001bc 	.word	0x200001bc

080042b8 <__sflush_r>:
 80042b8:	898a      	ldrh	r2, [r1, #12]
 80042ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042bc:	4605      	mov	r5, r0
 80042be:	0710      	lsls	r0, r2, #28
 80042c0:	460c      	mov	r4, r1
 80042c2:	d457      	bmi.n	8004374 <__sflush_r+0xbc>
 80042c4:	684b      	ldr	r3, [r1, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	dc04      	bgt.n	80042d4 <__sflush_r+0x1c>
 80042ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	dc01      	bgt.n	80042d4 <__sflush_r+0x1c>
 80042d0:	2000      	movs	r0, #0
 80042d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042d6:	2e00      	cmp	r6, #0
 80042d8:	d0fa      	beq.n	80042d0 <__sflush_r+0x18>
 80042da:	2300      	movs	r3, #0
 80042dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042e0:	682f      	ldr	r7, [r5, #0]
 80042e2:	602b      	str	r3, [r5, #0]
 80042e4:	d032      	beq.n	800434c <__sflush_r+0x94>
 80042e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042e8:	89a3      	ldrh	r3, [r4, #12]
 80042ea:	075a      	lsls	r2, r3, #29
 80042ec:	d505      	bpl.n	80042fa <__sflush_r+0x42>
 80042ee:	6863      	ldr	r3, [r4, #4]
 80042f0:	1ac0      	subs	r0, r0, r3
 80042f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042f4:	b10b      	cbz	r3, 80042fa <__sflush_r+0x42>
 80042f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042f8:	1ac0      	subs	r0, r0, r3
 80042fa:	2300      	movs	r3, #0
 80042fc:	4602      	mov	r2, r0
 80042fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004300:	4628      	mov	r0, r5
 8004302:	6a21      	ldr	r1, [r4, #32]
 8004304:	47b0      	blx	r6
 8004306:	1c43      	adds	r3, r0, #1
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	d106      	bne.n	800431a <__sflush_r+0x62>
 800430c:	6829      	ldr	r1, [r5, #0]
 800430e:	291d      	cmp	r1, #29
 8004310:	d82c      	bhi.n	800436c <__sflush_r+0xb4>
 8004312:	4a29      	ldr	r2, [pc, #164]	; (80043b8 <__sflush_r+0x100>)
 8004314:	40ca      	lsrs	r2, r1
 8004316:	07d6      	lsls	r6, r2, #31
 8004318:	d528      	bpl.n	800436c <__sflush_r+0xb4>
 800431a:	2200      	movs	r2, #0
 800431c:	6062      	str	r2, [r4, #4]
 800431e:	6922      	ldr	r2, [r4, #16]
 8004320:	04d9      	lsls	r1, r3, #19
 8004322:	6022      	str	r2, [r4, #0]
 8004324:	d504      	bpl.n	8004330 <__sflush_r+0x78>
 8004326:	1c42      	adds	r2, r0, #1
 8004328:	d101      	bne.n	800432e <__sflush_r+0x76>
 800432a:	682b      	ldr	r3, [r5, #0]
 800432c:	b903      	cbnz	r3, 8004330 <__sflush_r+0x78>
 800432e:	6560      	str	r0, [r4, #84]	; 0x54
 8004330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004332:	602f      	str	r7, [r5, #0]
 8004334:	2900      	cmp	r1, #0
 8004336:	d0cb      	beq.n	80042d0 <__sflush_r+0x18>
 8004338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800433c:	4299      	cmp	r1, r3
 800433e:	d002      	beq.n	8004346 <__sflush_r+0x8e>
 8004340:	4628      	mov	r0, r5
 8004342:	f000 f909 	bl	8004558 <_free_r>
 8004346:	2000      	movs	r0, #0
 8004348:	6360      	str	r0, [r4, #52]	; 0x34
 800434a:	e7c2      	b.n	80042d2 <__sflush_r+0x1a>
 800434c:	6a21      	ldr	r1, [r4, #32]
 800434e:	2301      	movs	r3, #1
 8004350:	4628      	mov	r0, r5
 8004352:	47b0      	blx	r6
 8004354:	1c41      	adds	r1, r0, #1
 8004356:	d1c7      	bne.n	80042e8 <__sflush_r+0x30>
 8004358:	682b      	ldr	r3, [r5, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0c4      	beq.n	80042e8 <__sflush_r+0x30>
 800435e:	2b1d      	cmp	r3, #29
 8004360:	d001      	beq.n	8004366 <__sflush_r+0xae>
 8004362:	2b16      	cmp	r3, #22
 8004364:	d101      	bne.n	800436a <__sflush_r+0xb2>
 8004366:	602f      	str	r7, [r5, #0]
 8004368:	e7b2      	b.n	80042d0 <__sflush_r+0x18>
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004370:	81a3      	strh	r3, [r4, #12]
 8004372:	e7ae      	b.n	80042d2 <__sflush_r+0x1a>
 8004374:	690f      	ldr	r7, [r1, #16]
 8004376:	2f00      	cmp	r7, #0
 8004378:	d0aa      	beq.n	80042d0 <__sflush_r+0x18>
 800437a:	0793      	lsls	r3, r2, #30
 800437c:	bf18      	it	ne
 800437e:	2300      	movne	r3, #0
 8004380:	680e      	ldr	r6, [r1, #0]
 8004382:	bf08      	it	eq
 8004384:	694b      	ldreq	r3, [r1, #20]
 8004386:	1bf6      	subs	r6, r6, r7
 8004388:	600f      	str	r7, [r1, #0]
 800438a:	608b      	str	r3, [r1, #8]
 800438c:	2e00      	cmp	r6, #0
 800438e:	dd9f      	ble.n	80042d0 <__sflush_r+0x18>
 8004390:	4633      	mov	r3, r6
 8004392:	463a      	mov	r2, r7
 8004394:	4628      	mov	r0, r5
 8004396:	6a21      	ldr	r1, [r4, #32]
 8004398:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800439c:	47e0      	blx	ip
 800439e:	2800      	cmp	r0, #0
 80043a0:	dc06      	bgt.n	80043b0 <__sflush_r+0xf8>
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ac:	81a3      	strh	r3, [r4, #12]
 80043ae:	e790      	b.n	80042d2 <__sflush_r+0x1a>
 80043b0:	4407      	add	r7, r0
 80043b2:	1a36      	subs	r6, r6, r0
 80043b4:	e7ea      	b.n	800438c <__sflush_r+0xd4>
 80043b6:	bf00      	nop
 80043b8:	20400001 	.word	0x20400001

080043bc <_fflush_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	690b      	ldr	r3, [r1, #16]
 80043c0:	4605      	mov	r5, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	b913      	cbnz	r3, 80043cc <_fflush_r+0x10>
 80043c6:	2500      	movs	r5, #0
 80043c8:	4628      	mov	r0, r5
 80043ca:	bd38      	pop	{r3, r4, r5, pc}
 80043cc:	b118      	cbz	r0, 80043d6 <_fflush_r+0x1a>
 80043ce:	6983      	ldr	r3, [r0, #24]
 80043d0:	b90b      	cbnz	r3, 80043d6 <_fflush_r+0x1a>
 80043d2:	f7ff fa19 	bl	8003808 <__sinit>
 80043d6:	4b14      	ldr	r3, [pc, #80]	; (8004428 <_fflush_r+0x6c>)
 80043d8:	429c      	cmp	r4, r3
 80043da:	d11b      	bne.n	8004414 <_fflush_r+0x58>
 80043dc:	686c      	ldr	r4, [r5, #4]
 80043de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0ef      	beq.n	80043c6 <_fflush_r+0xa>
 80043e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043e8:	07d0      	lsls	r0, r2, #31
 80043ea:	d404      	bmi.n	80043f6 <_fflush_r+0x3a>
 80043ec:	0599      	lsls	r1, r3, #22
 80043ee:	d402      	bmi.n	80043f6 <_fflush_r+0x3a>
 80043f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043f2:	f7ff faa7 	bl	8003944 <__retarget_lock_acquire_recursive>
 80043f6:	4628      	mov	r0, r5
 80043f8:	4621      	mov	r1, r4
 80043fa:	f7ff ff5d 	bl	80042b8 <__sflush_r>
 80043fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004400:	4605      	mov	r5, r0
 8004402:	07da      	lsls	r2, r3, #31
 8004404:	d4e0      	bmi.n	80043c8 <_fflush_r+0xc>
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	059b      	lsls	r3, r3, #22
 800440a:	d4dd      	bmi.n	80043c8 <_fflush_r+0xc>
 800440c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800440e:	f7ff fa9a 	bl	8003946 <__retarget_lock_release_recursive>
 8004412:	e7d9      	b.n	80043c8 <_fflush_r+0xc>
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <_fflush_r+0x70>)
 8004416:	429c      	cmp	r4, r3
 8004418:	d101      	bne.n	800441e <_fflush_r+0x62>
 800441a:	68ac      	ldr	r4, [r5, #8]
 800441c:	e7df      	b.n	80043de <_fflush_r+0x22>
 800441e:	4b04      	ldr	r3, [pc, #16]	; (8004430 <_fflush_r+0x74>)
 8004420:	429c      	cmp	r4, r3
 8004422:	bf08      	it	eq
 8004424:	68ec      	ldreq	r4, [r5, #12]
 8004426:	e7da      	b.n	80043de <_fflush_r+0x22>
 8004428:	080046bc 	.word	0x080046bc
 800442c:	080046dc 	.word	0x080046dc
 8004430:	0800469c 	.word	0x0800469c

08004434 <_lseek_r>:
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	4604      	mov	r4, r0
 8004438:	4608      	mov	r0, r1
 800443a:	4611      	mov	r1, r2
 800443c:	2200      	movs	r2, #0
 800443e:	4d05      	ldr	r5, [pc, #20]	; (8004454 <_lseek_r+0x20>)
 8004440:	602a      	str	r2, [r5, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	f7fc fb95 	bl	8000b72 <_lseek>
 8004448:	1c43      	adds	r3, r0, #1
 800444a:	d102      	bne.n	8004452 <_lseek_r+0x1e>
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	b103      	cbz	r3, 8004452 <_lseek_r+0x1e>
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	bd38      	pop	{r3, r4, r5, pc}
 8004454:	200001bc 	.word	0x200001bc

08004458 <__swhatbuf_r>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	460e      	mov	r6, r1
 800445c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004460:	4614      	mov	r4, r2
 8004462:	2900      	cmp	r1, #0
 8004464:	461d      	mov	r5, r3
 8004466:	b096      	sub	sp, #88	; 0x58
 8004468:	da08      	bge.n	800447c <__swhatbuf_r+0x24>
 800446a:	2200      	movs	r2, #0
 800446c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004470:	602a      	str	r2, [r5, #0]
 8004472:	061a      	lsls	r2, r3, #24
 8004474:	d410      	bmi.n	8004498 <__swhatbuf_r+0x40>
 8004476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800447a:	e00e      	b.n	800449a <__swhatbuf_r+0x42>
 800447c:	466a      	mov	r2, sp
 800447e:	f000 f8c5 	bl	800460c <_fstat_r>
 8004482:	2800      	cmp	r0, #0
 8004484:	dbf1      	blt.n	800446a <__swhatbuf_r+0x12>
 8004486:	9a01      	ldr	r2, [sp, #4]
 8004488:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800448c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004490:	425a      	negs	r2, r3
 8004492:	415a      	adcs	r2, r3
 8004494:	602a      	str	r2, [r5, #0]
 8004496:	e7ee      	b.n	8004476 <__swhatbuf_r+0x1e>
 8004498:	2340      	movs	r3, #64	; 0x40
 800449a:	2000      	movs	r0, #0
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	b016      	add	sp, #88	; 0x58
 80044a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080044a4 <__smakebuf_r>:
 80044a4:	898b      	ldrh	r3, [r1, #12]
 80044a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044a8:	079d      	lsls	r5, r3, #30
 80044aa:	4606      	mov	r6, r0
 80044ac:	460c      	mov	r4, r1
 80044ae:	d507      	bpl.n	80044c0 <__smakebuf_r+0x1c>
 80044b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	6123      	str	r3, [r4, #16]
 80044b8:	2301      	movs	r3, #1
 80044ba:	6163      	str	r3, [r4, #20]
 80044bc:	b002      	add	sp, #8
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	466a      	mov	r2, sp
 80044c2:	ab01      	add	r3, sp, #4
 80044c4:	f7ff ffc8 	bl	8004458 <__swhatbuf_r>
 80044c8:	9900      	ldr	r1, [sp, #0]
 80044ca:	4605      	mov	r5, r0
 80044cc:	4630      	mov	r0, r6
 80044ce:	f7ff fa5b 	bl	8003988 <_malloc_r>
 80044d2:	b948      	cbnz	r0, 80044e8 <__smakebuf_r+0x44>
 80044d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044d8:	059a      	lsls	r2, r3, #22
 80044da:	d4ef      	bmi.n	80044bc <__smakebuf_r+0x18>
 80044dc:	f023 0303 	bic.w	r3, r3, #3
 80044e0:	f043 0302 	orr.w	r3, r3, #2
 80044e4:	81a3      	strh	r3, [r4, #12]
 80044e6:	e7e3      	b.n	80044b0 <__smakebuf_r+0xc>
 80044e8:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <__smakebuf_r+0x7c>)
 80044ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	6020      	str	r0, [r4, #0]
 80044f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f4:	81a3      	strh	r3, [r4, #12]
 80044f6:	9b00      	ldr	r3, [sp, #0]
 80044f8:	6120      	str	r0, [r4, #16]
 80044fa:	6163      	str	r3, [r4, #20]
 80044fc:	9b01      	ldr	r3, [sp, #4]
 80044fe:	b15b      	cbz	r3, 8004518 <__smakebuf_r+0x74>
 8004500:	4630      	mov	r0, r6
 8004502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004506:	f000 f893 	bl	8004630 <_isatty_r>
 800450a:	b128      	cbz	r0, 8004518 <__smakebuf_r+0x74>
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	f023 0303 	bic.w	r3, r3, #3
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	81a3      	strh	r3, [r4, #12]
 8004518:	89a0      	ldrh	r0, [r4, #12]
 800451a:	4305      	orrs	r5, r0
 800451c:	81a5      	strh	r5, [r4, #12]
 800451e:	e7cd      	b.n	80044bc <__smakebuf_r+0x18>
 8004520:	080037a1 	.word	0x080037a1

08004524 <memchr>:
 8004524:	4603      	mov	r3, r0
 8004526:	b510      	push	{r4, lr}
 8004528:	b2c9      	uxtb	r1, r1
 800452a:	4402      	add	r2, r0
 800452c:	4293      	cmp	r3, r2
 800452e:	4618      	mov	r0, r3
 8004530:	d101      	bne.n	8004536 <memchr+0x12>
 8004532:	2000      	movs	r0, #0
 8004534:	e003      	b.n	800453e <memchr+0x1a>
 8004536:	7804      	ldrb	r4, [r0, #0]
 8004538:	3301      	adds	r3, #1
 800453a:	428c      	cmp	r4, r1
 800453c:	d1f6      	bne.n	800452c <memchr+0x8>
 800453e:	bd10      	pop	{r4, pc}

08004540 <__malloc_lock>:
 8004540:	4801      	ldr	r0, [pc, #4]	; (8004548 <__malloc_lock+0x8>)
 8004542:	f7ff b9ff 	b.w	8003944 <__retarget_lock_acquire_recursive>
 8004546:	bf00      	nop
 8004548:	200001b0 	.word	0x200001b0

0800454c <__malloc_unlock>:
 800454c:	4801      	ldr	r0, [pc, #4]	; (8004554 <__malloc_unlock+0x8>)
 800454e:	f7ff b9fa 	b.w	8003946 <__retarget_lock_release_recursive>
 8004552:	bf00      	nop
 8004554:	200001b0 	.word	0x200001b0

08004558 <_free_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	4605      	mov	r5, r0
 800455c:	2900      	cmp	r1, #0
 800455e:	d040      	beq.n	80045e2 <_free_r+0x8a>
 8004560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004564:	1f0c      	subs	r4, r1, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	bfb8      	it	lt
 800456a:	18e4      	addlt	r4, r4, r3
 800456c:	f7ff ffe8 	bl	8004540 <__malloc_lock>
 8004570:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <_free_r+0x8c>)
 8004572:	6813      	ldr	r3, [r2, #0]
 8004574:	b933      	cbnz	r3, 8004584 <_free_r+0x2c>
 8004576:	6063      	str	r3, [r4, #4]
 8004578:	6014      	str	r4, [r2, #0]
 800457a:	4628      	mov	r0, r5
 800457c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004580:	f7ff bfe4 	b.w	800454c <__malloc_unlock>
 8004584:	42a3      	cmp	r3, r4
 8004586:	d908      	bls.n	800459a <_free_r+0x42>
 8004588:	6820      	ldr	r0, [r4, #0]
 800458a:	1821      	adds	r1, r4, r0
 800458c:	428b      	cmp	r3, r1
 800458e:	bf01      	itttt	eq
 8004590:	6819      	ldreq	r1, [r3, #0]
 8004592:	685b      	ldreq	r3, [r3, #4]
 8004594:	1809      	addeq	r1, r1, r0
 8004596:	6021      	streq	r1, [r4, #0]
 8004598:	e7ed      	b.n	8004576 <_free_r+0x1e>
 800459a:	461a      	mov	r2, r3
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	b10b      	cbz	r3, 80045a4 <_free_r+0x4c>
 80045a0:	42a3      	cmp	r3, r4
 80045a2:	d9fa      	bls.n	800459a <_free_r+0x42>
 80045a4:	6811      	ldr	r1, [r2, #0]
 80045a6:	1850      	adds	r0, r2, r1
 80045a8:	42a0      	cmp	r0, r4
 80045aa:	d10b      	bne.n	80045c4 <_free_r+0x6c>
 80045ac:	6820      	ldr	r0, [r4, #0]
 80045ae:	4401      	add	r1, r0
 80045b0:	1850      	adds	r0, r2, r1
 80045b2:	4283      	cmp	r3, r0
 80045b4:	6011      	str	r1, [r2, #0]
 80045b6:	d1e0      	bne.n	800457a <_free_r+0x22>
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4401      	add	r1, r0
 80045be:	6011      	str	r1, [r2, #0]
 80045c0:	6053      	str	r3, [r2, #4]
 80045c2:	e7da      	b.n	800457a <_free_r+0x22>
 80045c4:	d902      	bls.n	80045cc <_free_r+0x74>
 80045c6:	230c      	movs	r3, #12
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	e7d6      	b.n	800457a <_free_r+0x22>
 80045cc:	6820      	ldr	r0, [r4, #0]
 80045ce:	1821      	adds	r1, r4, r0
 80045d0:	428b      	cmp	r3, r1
 80045d2:	bf01      	itttt	eq
 80045d4:	6819      	ldreq	r1, [r3, #0]
 80045d6:	685b      	ldreq	r3, [r3, #4]
 80045d8:	1809      	addeq	r1, r1, r0
 80045da:	6021      	streq	r1, [r4, #0]
 80045dc:	6063      	str	r3, [r4, #4]
 80045de:	6054      	str	r4, [r2, #4]
 80045e0:	e7cb      	b.n	800457a <_free_r+0x22>
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
 80045e4:	200001b4 	.word	0x200001b4

080045e8 <_read_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4604      	mov	r4, r0
 80045ec:	4608      	mov	r0, r1
 80045ee:	4611      	mov	r1, r2
 80045f0:	2200      	movs	r2, #0
 80045f2:	4d05      	ldr	r5, [pc, #20]	; (8004608 <_read_r+0x20>)
 80045f4:	602a      	str	r2, [r5, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f7fc fa7a 	bl	8000af0 <_read>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_read_r+0x1e>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_read_r+0x1e>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	200001bc 	.word	0x200001bc

0800460c <_fstat_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	2300      	movs	r3, #0
 8004610:	4d06      	ldr	r5, [pc, #24]	; (800462c <_fstat_r+0x20>)
 8004612:	4604      	mov	r4, r0
 8004614:	4608      	mov	r0, r1
 8004616:	4611      	mov	r1, r2
 8004618:	602b      	str	r3, [r5, #0]
 800461a:	f7fc fa91 	bl	8000b40 <_fstat>
 800461e:	1c43      	adds	r3, r0, #1
 8004620:	d102      	bne.n	8004628 <_fstat_r+0x1c>
 8004622:	682b      	ldr	r3, [r5, #0]
 8004624:	b103      	cbz	r3, 8004628 <_fstat_r+0x1c>
 8004626:	6023      	str	r3, [r4, #0]
 8004628:	bd38      	pop	{r3, r4, r5, pc}
 800462a:	bf00      	nop
 800462c:	200001bc 	.word	0x200001bc

08004630 <_isatty_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	2300      	movs	r3, #0
 8004634:	4d05      	ldr	r5, [pc, #20]	; (800464c <_isatty_r+0x1c>)
 8004636:	4604      	mov	r4, r0
 8004638:	4608      	mov	r0, r1
 800463a:	602b      	str	r3, [r5, #0]
 800463c:	f7fc fa8f 	bl	8000b5e <_isatty>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d102      	bne.n	800464a <_isatty_r+0x1a>
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	b103      	cbz	r3, 800464a <_isatty_r+0x1a>
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	bd38      	pop	{r3, r4, r5, pc}
 800464c:	200001bc 	.word	0x200001bc

08004650 <_init>:
 8004650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004652:	bf00      	nop
 8004654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004656:	bc08      	pop	{r3}
 8004658:	469e      	mov	lr, r3
 800465a:	4770      	bx	lr

0800465c <_fini>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	bf00      	nop
 8004660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004662:	bc08      	pop	{r3}
 8004664:	469e      	mov	lr, r3
 8004666:	4770      	bx	lr
